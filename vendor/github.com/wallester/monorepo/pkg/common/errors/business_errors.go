package errors

import (
	"github.com/juju/errors"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// NB! Please also add a test case to check the error in business_error_test.go file.
var (
	APIKeyIsDeleted                                                             = NewBusinessError(ErrorCodeAPIKeyIsDeleted, "API key is deleted")
	APIKeyNotFound                                                              = NewBusinessError(ErrorCodeAPIKeyNotFound, "API key not found")
	APIUserIsAlreadyDeleted                                                     = NewBusinessError(ErrorCodeAPIUserIsAlreadyDeleted, "API user is already deleted")
	AccessTokenIsRequired                                                       = NewBusinessError(ErrorCodeAccessTokenIsRequired, "AccessToken is required")
	AccountAdjustmentAlreadyExists                                              = NewBusinessError(ErrorCodeAccountAdjustmentAlreadyExists, "account adjustment already exists")
	AccountAdjustmentCannotBeMade                                               = NewBusinessError(ErrorCodeAccountAdjustmentCannotBeMade, "account adjustment cannot be made")
	AccountAdjustmentIDIsRequired                                               = NewBusinessError(ErrorCodeAccountAdjustmentIDIsRequired, "AccountAdjustmentID is required")
	AccountAdjustmentIDNotInUUID4Format                                         = NewBusinessError(ErrorCodeAccountAdjustmentIDNotInUUID4Format, "AccountAdjustmentID is not in UUID4 format")
	AccountAdjustmentIDsAreRequired                                             = NewBusinessError(ErrorCodeAccountAdjustmentIDsAreRequired, "AccountAdjustmentIDs are required")
	AccountAdjustmentNotFound                                                   = NewBusinessError(ErrorCodeAccountAdjustmentNotFound, "no account adjustment found")
	AccountAdjustmentTypeIsNotWithinAllowedRange                                = NewBusinessError(ErrorCodeAccountAdjustmentTypeIsNotWithinAllowedRange, "AccountAdjustmentType is not within allowed range")
	AccountAdjustmentsNotFound                                                  = NewBusinessError(ErrorCodeAccountAdjustmentsNotFound, "no account adjustments found")
	AccountAmountIsRequired                                                     = NewBusinessError(ErrorCodeAccountAmountIsRequired, "account amount is required")
	AccountBalanceAndAvailableAmountShouldBeZero                                = NewBusinessError(ErrorCodeAccountBalanceAndAvailableAmountShouldBeZero, "account balance and available amount should be zero")
	AccountCanNotBeClosed                                                       = NewBusinessError(ErrorCodeAccountCanNotBeClosed, "account can not be closed")
	AccountCurrencyCodeIsNotAllowed                                             = NewBusinessError(ErrorCodeAccountCurrencyCodeIsNotAllowed, "account currency code is not allowed")
	AccountCurrencyCodeIsRequired                                               = NewBusinessError(ErrorCodeAccountCurrencyCodeIsRequired, "account currency code is required")
	AccountHasOpenedCards                                                       = NewBusinessError(ErrorCodeAccountHasOpenedCards, "account has opened cards")
	AccountIDIsRequired                                                         = NewBusinessError(ErrorCodeAccountIDIsRequired, "AccountID is required")
	AccountIDNotInUUID4Format                                                   = NewBusinessError(ErrorCodeAccountIDNotInUUID4Format, "AccountID is not in UUID4 format")
	AccountIDOrCardIDIsRequired                                                 = NewBusinessError(ErrorCodeAccountIDOrCardIDIsRequired, "AccountID or CardID is required")
	AccountIDsAreRequired                                                       = NewBusinessError(ErrorCodeAccountIDsAreRequired, "AccountIDs are required")
	AccountIsBlocked                                                            = NewBusinessError(ErrorCodeAccountIsBlocked, "account is blocked")
	AccountIsClosed                                                             = NewBusinessError(ErrorCodeAccountIsClosed, "account is closed")
	AccountIsClosing                                                            = NewBusinessError(ErrorCodeAccountIsClosing, "account is in closing state")
	AccountIsFrozen                                                             = NewBusinessError(ErrorCodeAccountIsFrozen, "account is frozen")
	AccountIsNotClosed                                                          = NewBusinessError(ErrorCodeAccountIsNotClosed, "account is not closed")
	AccountIsRequired                                                           = NewBusinessError(ErrorCodeAccountIsRequired, "Account is required")
	AccountLimitsCannotBeNegative                                               = NewBusinessError(ErrorCodeAccountLimitsCannotBeNegative, "account limits cannot be negative")
	AccountLimitsCannotExceedMaximumLimits                                      = NewBusinessError(ErrorCodeAccountLimitsCannotExceedMaximumLimits, "account limits cannot exceed maximum limits")
	AccountNameCannotBeChanged                                                  = NewBusinessError(ErrorCodeAccountNameCannotBeChanged, "account name cannot be changed")
	AccountNotFound                                                             = NewBusinessError(ErrorCodeAccountNotFound, "no account found")
	AccountOwnerNotFound                                                        = NewBusinessError(ErrorCodeAccountOwnerNotFound, "no account owner found")
	AccountTopUpMethodNotAllowed                                                = NewBusinessError(ErrorCodeAccountTopUpMethodNotAllowed, "account top up method not allowed")
	AccountsNotFound                                                            = NewBusinessError(ErrorCodeAccountsNotFound, "accounts not found")
	AcquirerBusinessIDIsRequired                                                = NewBusinessError(ErrorCodeAcquirerBusinessIDIsRequired, "acquirer business ID is required")
	AcquirerBusinessIDMustBeMaximum8CharsInLength                               = NewBusinessError(ErrorCodeAcquirerBusinessIDMustBeMaximum8CharsInLength, "AcquirerBusinessID must be maximum 8 chars in length")
	AcquirerReferenceNumberIsRequired                                           = NewBusinessError(ErrorCodeAcquirerReferenceNumberIsRequired, "acquirer reference number is required")
	AcquirerReferenceNumberMustBeMaximum23CharsInLength                         = NewBusinessError(ErrorCodeAcquirerReferenceNumberMustBeMaximum23CharsInLength, "AcquirerReferenceNumber must be maximum 23 chars in length")
	ActionExpired                                                               = NewBusinessError(ErrorCodeActionExpired, "action expired")
	ActionIDIsRequired                                                          = NewBusinessError(ErrorCodeActionIDIsRequired, "action ID is required")
	ActionIDNotInUUID4Format                                                    = NewBusinessError(ErrorCodeActionIDNotInUUID4Format, "action ID is not in UUID4 format")
	ActionIsNotAllowed                                                          = NewBusinessError(ErrorCodeActionIsNotAllowed, "Action is not allowed")
	ActionNotFound                                                              = NewBusinessError(ErrorCodeActionNotFound, "action not found")
	ActivationCodeIsRequired                                                    = NewBusinessError(ErrorCodeActivationCodeIsRequired, "activation code is required")
	ActivityTypeIsNotWithinAllowedRange                                         = NewBusinessError(ErrorCodeActivityTypeIsNotWithinAllowedRange, "ActivityType is not within allowed range")
	ActivityTypeIsRequired                                                      = NewBusinessError(ErrorCodeActivityTypeIsRequired, "ActivityType is required")
	ActualCityIsRequired                                                        = NewBusinessError(ErrorCodeActualCityIsRequired, "ActualCity is required")
	ActualCityMustBeMaximum35CharactersInLength                                 = NewBusinessError(ErrorCodeActualCityMustBeMaximum35CharactersInLength, "ActualCity must be maximum 35 characters in length")
	ActualCityMustBeMaximum100CharactersInLength                                = NewBusinessError(ErrorCodeActualCityMustBeMaximum100CharactersInLength, "ActualCity must be maximum 100 characters in length")
	ActualCountryCodeIsNotAllowed                                               = NewBusinessError(ErrorCodeActualCountryCodeIsNotAllowed, "ActualCountryCode is not allowed")
	ActualCountryCodeIsNotWithinAllowedRange                                    = NewBusinessError(ErrorCodeActualCountryCodeIsNotWithinAllowedRange, "ActualCountryCode is not within allowed range")
	ActualCountryCodeIsRequired                                                 = NewBusinessError(ErrorCodeActualCountryCodeIsRequired, "ActualCountryCode is required")
	ActualFlatIsRequired                                                        = NewBusinessError(ErrorCodeActualFlatIsRequired, "ActualFlat is required")
	ActualFlatMustBeMaximum50CharactersInLength                                 = NewBusinessError(ErrorCodeActualFlatMustBeMaximum50CharactersInLength, "ActualFlat must be maximum 50 characters in length")
	ActualPostalCodeIsRequired                                                  = NewBusinessError(ErrorCodeActualPostalCodeIsRequired, "ActualPostalCode is required")
	ActualPostalCodeMustBeMaximum10CharactersInLength                           = NewBusinessError(ErrorCodeActualPostalCodeMustBeMaximum10CharactersInLength, "ActualPostalCode must be maximum 10 characters in length")
	ActualRegionIsRequired                                                      = NewBusinessError(ErrorCodeActualRegionIsRequired, "ActualRegion is required")
	ActualRegionMustBeMaximum255CharactersInLength                              = NewBusinessError(ErrorCodeActualRegionMustBeMaximum255CharactersInLength, "ActualRegion must be maximum 255 characters in length")
	ActualStreetIsRequired                                                      = NewBusinessError(ErrorCodeActualStreetIsRequired, "ActualStreet is required")
	ActualStreetMustBeMaximum200CharactersInLength                              = NewBusinessError(ErrorCodeActualStreetMustBeMaximum200CharactersInLength, "ActualStreet must be maximum 200 characters in length")
	AdditionalInfoMapSizeTooBig                                                 = NewBusinessError(ErrorCodeAdditionalInfoMapSizeTooBig, "additional info map size too big")
	AddressIsRequired                                                           = NewBusinessError(ErrorCodeAddressIsRequired, "Address is required")
	AddressMustBeMaximum45CharsInLength                                         = NewBusinessError(ErrorCodeAddressMustBeMaximum45CharsInLength, "Address must be maximum 45 chars in length")
	AffiliateDataNotFound                                                       = NewBusinessError(ErrorCodeAffiliateDataNotFound, "affiliate data not found")
	AgreementAlreadySigned                                                      = NewBusinessError(ErrorCodeAgreementAlreadySigned, "agreement already signed")
	AgreementCannotBeSigned                                                     = NewBusinessError(ErrorCodeAgreementCannotBeSigned, "agreement cannot be signed")
	AgreementFileNotFound                                                       = NewBusinessError(ErrorCodeAgreementFileNotFound, "agreement file not found")
	AgreementIDAlreadyExists                                                    = NewBusinessError(ErrorCodeAgreementIDAlreadyExists, "AgreementID already exists")
	AgreementIDIsRequired                                                       = NewBusinessError(ErrorCodeAgreementIDIsRequired, "AgreementID is required")
	AgreementIDNotInUUID4Format                                                 = NewBusinessError(ErrorCodeAgreementIDNotInUUID4Format, "AgreementID is not in UUID4 format")
	AgreementNotFound                                                           = NewBusinessError(ErrorCodeAgreementNotFound, "agreement not found")
	AllAttemptsExceeded                                                         = NewBusinessError(ErrorCodeAllAttemptsExceeded, "all attempts exceed")
	AllTimeContactlessPurchaseLimitCannotBeLessThanAlreadyUsedLimit             = NewBusinessError(ErrorCodeAllTimeContactlessPurchaseLimitCannotBeLessThanAlreadyUsedLimit, "All time contactless purchase limit can not be less than already used limit")
	AllTimeInternetPurchaseLimitCannotBeLessThanAlreadyUsedLimit                = NewBusinessError(ErrorCodeAllTimeInternetPurchaseLimitCannotBeLessThanAlreadyUsedLimit, "All time internet purchase limit cannot be less than already used limit")
	AllTimeLimitsAreDisabledForProduct                                          = NewBusinessError(ErrorCodeAllTimeLimitsAreDisabledForProduct, "All time limits are disabled for product")
	AllTimeLimitsCannotBeEnabled                                                = NewBusinessError(ErrorCodeAllTimeLimitsCannotBeEnabled, "All time limits cannot be enabled")
	AllTimePurchaseLimitCannotBeLessThanAlreadyUsedLimit                        = NewBusinessError(ErrorCodeAllTimePurchaseLimitCannotBeLessThanAlreadyUsedLimit, "All time purchase limit can not be less than already used limit")
	AllTimeWithdrawalLimitCannotBeLessThanAlreadyUsedLimit                      = NewBusinessError(ErrorCodeAllTimeWithdrawalLimitCannotBeLessThanAlreadyUsedLimit, "All time withdrawal limit can not be less than already used limit")
	AmountIsRequired                                                            = NewBusinessError(ErrorCodeAmountIsRequired, "Amount is required")
	AmountIsTooLarge                                                            = NewBusinessError(ErrorCodeAmountIsTooLarge, "Amount is too large")
	AmountMustBeDifferentThanZero                                               = NewBusinessError(ErrorCodeAmountMustBeDifferentThanZero, "amount must be different than 0")
	AmountMustBePositiveNumber                                                  = NewBusinessError(ErrorCodeAmountMustBePositiveNumber, "Amount must be positive number")
	AnonymousCardsBatchOrdersAreNotAllowed                                      = NewBusinessError(ErrorCodeAnonymousCardsBatchOrdersAreNotAllowed, "anonymous cards batch orders are not allowed")
	ApplicantIDIsEmpty                                                          = NewBusinessError(ErrorCodeApplicantIDIsEmpty, "applicant id should not be empty")
	ApplicantIDIsInvalid                                                        = NewBusinessError(ErrorCodeApplicantIDIsInvalid, "applicant id is invalid")
	ApplicantIDIsRequired                                                       = NewBusinessError(ErrorCodeApplicantIDIsRequired, "applicant id is required")
	ApplicantIDNotFound                                                         = NewBusinessError(ErrorCodeApplicantIDNotFound, "applicant ID not found")
	ApplicantNotFound                                                           = NewBusinessError(ErrorCodeApplicantNotFound, "applicant not found")
	ApplicationDeleted                                                          = NewBusinessError(ErrorCodeApplicationDeleted, "application is deleted")
	ApplicationNotFound                                                         = NewBusinessError(ErrorCodeApplicationNotFound, "application is not found")
	AreqBrowserLanguageMustHaveLimitedLength                                    = NewBusinessError(ErrorCodeAreqBrowserLanguageMustHaveLimitedLength, "Areq browser language must have limited length")
	AreqPaymentDataMustHaveLimitedLength                                        = NewBusinessError(ErrorCodeAreqPaymentDataMustHaveLimitedLength, "Areq payment data must have limited length")
	AresReasonCodeMustHaveLimitedLength                                         = NewBusinessError(ErrorCodeAresReasonCodeMustHaveLimitedLength, "Ares reason code must have limited length")
	AresStatusMustHaveLimitedLength                                             = NewBusinessError(ErrorCodeAresStatusMustHaveLimitedLength, "Ares status must have limited length")
	AtLeastOneApplicantIDIsRequired                                             = NewBusinessError(ErrorCodeAtLeastOneApplicantIDIsRequired, "at least one applicant ID is required")
	AtLeastOneAuthorizationTypeRequired                                         = NewBusinessError(ErrorCodeAtLeastOneAuthorizationTypeRequired, "at least one authorization type is required")
	AtLeastOneBoardMemberMustBeMarkedAsCompanyRepresentative                    = NewBusinessError(ErrorCodeAtLeastOneBoardMemberMustBeMarkedAsCompanyRepresentative, "at least one board member must be marked as company representative")
	AtLeastOneCardFeeIsRequired                                                 = NewBusinessError(ErrorCodeAtLeastOneCardFeeIsRequired, "at least one card fee is required")
	AtLeastOneCardTypeRequired                                                  = NewBusinessError(ErrorCodeAtleastOneCardTypeRequired, "at least one card type is required")
	AtLeastOneDirectoryIsRequired                                               = NewBusinessError(ErrorCodeAtLeastOneDirectoryIsRequired, "at least one directory is required")
	AtLeastOneEmailIsRequired                                                   = NewBusinessError(ErrorCodeAtLeastOneEmailIsRequired, "at least one email is required")
	AtLeastOnePositiveFeePartRequired                                           = NewBusinessError(ErrorCodeAtLeastOnePositiveFeePartRequired, "at least one positive fee part required")
	AtLeastOneSearchParameterRequired                                           = NewBusinessError(ErrorCodeAtLeastOneSearchParameterRequired, "at least one search parameter is required")
	AuditUserIDIsRequired                                                       = NewBusinessError(ErrorCodeAuditUserIDIsRequired, "audit user ID is required")
	AuditUserIDNotInUUID4Format                                                 = NewBusinessError(ErrorCodeAuditUserIDNotInUUID4Format, "AuditUserID is not in UUID4 format")
	AuthenticationHistoriesNotFound                                             = NewBusinessError(ErrorCodeAuthenticationHistoriesNotFound, "no authentication histories found")
	AuthenticationHistoryIsRequired                                             = NewBusinessError(ErrorCodeAuthenticationHistoryIsRequired, "authentication history is required")
	AuthenticationTimeIsRequired                                                = NewBusinessError(ErrorCodeAuthenticationTimeIsRequired, "AuthenticationTime is required")
	AuthorizationAdditionalInfoNotFound                                         = NewBusinessError(ErrorCodeAuthorizationAdditionalInfoNotFound, "authorization additional info not found")
	AuthorizationBalanceIsZero                                                  = NewBusinessError(ErrorCodeAuthorizationBalanceIsZero, "authorization balance is zero")
	AuthorizationDecisionDefaultBehaviourIsNotWithinAllowedRange                = NewBusinessError(ErrorCodeAuthorizationDecisionDefaultBehaviourIsNotWithinAllowedRange, "AuthorizationDecisionDefaultBehaviour is not within allowed range")
	AuthorizationDecisionDefaultBehaviourIsRequired                             = NewBusinessError(ErrorCodeAuthorizationDecisionDefaultBehaviourIsRequired, "AuthorizationDecisionDefaultBehaviour is required")
	AuthorizationDecisionDefaultBehaviourMustBeMaximum4096CharsInLength         = NewBusinessError(ErrorCodeAuthorizationDecisionDefaultBehaviourMustBeMaximum4096CharsInLength, "AuthorizationDecisionDefaultBehaviour must be maximum of 4096 characters in length")
	AuthorizationIDIsRequired                                                   = NewBusinessError(ErrorCodeAuthorizationIDIsRequired, "AuthorizationID is required")
	AuthorizationIDNotInUUID4Format                                             = NewBusinessError(ErrorCodeAuthorizationIDNotInUUID4Format, "AuthorizationID is not in UUID4 format")
	AuthorizationIsAlreadyMarkedForManualRelease                                = NewBusinessError(ErrorCodeAuthorizationIsAlreadyMarkedForManualRelease, "authorization is already marked for manual release")
	AuthorizationIsAlreadyReleased                                              = NewBusinessError(ErrorCodeAuthorizationIsAlreadyReleased, "authorization is already released")
	AuthorizationNotFound                                                       = NewBusinessError(ErrorCodeAuthorizationNotFound, "no authorization found")
	AuthorizationTypeIsInvalid                                                  = NewBusinessError(ErrorCodeAuthorizationTypeIsInvalid, "AuthorizationType is invalid")
	AuthorizationsNotFound                                                      = NewBusinessError(ErrorCodeAuthorizationsNotFound, "no authorizations found")
	BINMustBeMax6DigitsInLength                                                 = NewBusinessError(ErrorCodeBINMustBeMax6DigitsInLength, "BIN must be max 6 digits in length")
	BINRangeIsRequired                                                          = NewBusinessError(ErrorCodeBINRangeIsRequired, "BINRange is required")
	BadChecksum                                                                 = NewBusinessError(ErrorCodeBadChecksum, "bad checksum")
	BankIdentifierIsRequired                                                    = NewBusinessError(ErrorCodeBankIdentifierIsRequired, "BankIdentifier is required")
	BankPaymentReferenceIDAlreadyExists                                         = NewBusinessError(ErrorCodeBankPaymentReferenceIDAlreadyExists, "BankPaymentReferenceID already exists")
	BankPaymentReferenceIDMustBeMaximum255CharsInLength                         = NewBusinessError(ErrorCodeBankPaymentReferenceIDMustBeMaximum255CharsInLength, "BankPaymentReferenceID must be maximum of 255 characters in length")
	BatchIDIsRequired                                                           = NewBusinessError(ErrorCodeBatchIDIsRequired, "BatchID is required")
	BatchIDNotInUUID4Format                                                     = NewBusinessError(ErrorCodeBatchIDNotInUUID4Format, "BatchID not in UUID4 format")
	BatchOrderDispatchTypeMustBeDeliveryEconomy                                 = NewBusinessError(ErrorCodeBatchOrderDispatchTypeMustBeDeliveryEconomy, "batch order dispatch type must be delivery economy")
	BatchOrderNotFound                                                          = NewBusinessError(ErrorCodeBatchOrderNotFound, "batch order not found")
	BatchRequestNotFound                                                        = NewBusinessError(ErrorCodeBatchRequestNotFound, "batch request not found")
	BatchSizeMustBeLessThanOrEqualTo500                                         = NewBusinessError(ErrorCodeBatchSizeMustBeLessThanOrEqualTo500, "BatchSize must be less than or equal to 500")
	BeneficialOwnersCertificateIsRequired                                       = NewBusinessError(ErrorCodeBeneficialOwnersCertificateIsRequired, "beneficial owners certificate is required")
	BeneficiaryIBANIsRequired                                                   = NewBusinessError(ErrorCodeBeneficiaryIBANIsRequired, "BeneficiaryIBAN is required")
	BeneficiaryReceiverNameIsRequired                                           = NewBusinessError(ErrorCodeBeneficiaryReceiverNameIsRequired, "BeneficiaryReceiverName is required")
	BirthCountryCodeCannotBeChanged                                             = NewBusinessError(ErrorCodeBirthCountryCodeCannotBeChanged, "birth country code cannot be changed")
	BirthCountryCodeIsNotWithinAllowedRange                                     = NewBusinessError(ErrorCodeBirthCountryCodeIsNotWithinAllowedRange, "BirthCountryCode is not within allowed range")
	BirthCountryCodeIsRequiredInCaseOfPersonalNumberIsNotSet                    = NewBusinessError(ErrorCodeBirthCountryCodeIsRequiredInCaseOfPersonalNumberIsNotSet, "BirthCountryCode is required in case of PersonalNumber is not set")
	BirthDateCannotBeChanged                                                    = NewBusinessError(ErrorCodeBirthDateCannotBeChanged, "birth date cannot be changed")
	BirthDateCannotBeInFuture                                                   = NewBusinessError(ErrorCodeBirthDateCannotBeInFuture, "BirthDate cannot be in future")
	BirthDateIsNotWithinAllowedRange                                            = NewBusinessError(ErrorCodeBirthDateIsNotWithinAllowedRange, "BirthDate is not within allowed range")
	BirthDateIsRequired                                                         = NewBusinessError(ErrorCodeBirthDateIsRequired, "BirthDate is required")
	BirthDateMustBeAtLeast16YearsOld                                            = NewBusinessError(ErrorCodeBirthDateMustBeAtLeast16YearsOld, "BirthDate must be at least 16 years old")
	BirthDateMustBeAtLeast18YearsOld                                            = NewBusinessError(ErrorCodeBirthDateMustBeAtLeast18YearsOld, "BirthDate must be at least 18 years old")
	BoardMemberIDIsRequired                                                     = NewBusinessError(ErrorCodeBoardMemberIDIsRequired, "BoardMemberID is required")
	BoardMemberIDNotInUUID4Format                                               = NewBusinessError(ErrorCodeBoardMemberIDNotInUUID4Format, "BoardMemberID not in UUID4 format")
	BoardMemberIsDeleted                                                        = NewBusinessError(ErrorCodeBoardMemberIsDeleted, "board member is deleted")
	BoardMemberNotFound                                                         = NewBusinessError(ErrorCodeBoardMemberNotFound, "board member not found")
	BoardMembersVerificationIsNotAllowed                                        = NewBusinessError(ErrorCodeBoardMembersVerificationIsNotAllowed, "board members verification is not allowed")
	BodyPartIsRequired                                                          = NewBusinessError(ErrorCodeBodyPartIsRequired, "BodyPart is required")
	BucketIsRequired                                                            = NewBusinessError(ErrorCodeBucketIsRequired, "Bucket is required")
	BusinessDescriptionMustBeMaximum4096CharsInLength                           = NewBusinessError(ErrorCodeBusinessDescriptionMustBeMaximum4096CharsInLength, "BusinessDescription must be maximum 4096 chars in length")
	BusinessProgramRequired                                                     = NewBusinessError(ErrorCodeBusinessProgramRequired, "Business Program required in product settings")
	BusinessRelationshipPurposeMustBeMaximum255CharsInLength                    = NewBusinessError(ErrorCodeBusinessRelationshipPurposeMustBeMaximum255CharsInLength, "BusinessRelationshipPurpose must be maximum 255 chars in length")
	CSRTypeNotWithinAllowedRange                                                = NewBusinessError(ErrorCodeCSRTypeNotWithinAllowedRange, "CSR type is not within allowed range")
	CSVIsRequired                                                               = NewBusinessError(ErrorCodeCSVIsRequired, "CSV is required")
	CVVCannotBeDecryptedDueToRSA                                                = NewBusinessError(ErrorCodeCVVCannotBeDecryptedDueToRSA, "CVV cannot be decrypted due to RSA")
	CVVIsRequired                                                               = NewBusinessError(ErrorCodeCVVIsRequired, "CVV is required")
	CVVMismatch                                                                 = NewBusinessError(ErrorCodeCVVMismatch, "CVV mismatch")
	CanNotChangePhoneEmailForNonIndividualShareholder                           = NewBusinessError(ErrorCodeCanNotChangePhoneEmailForNonIndividualShareholder, "can not change phone/email for non individual shareholder")
	CanceledAtIsRequired                                                        = NewBusinessError(ErrorCodeCanceledAtIsRequired, "CanceledAt is required")
	CanceledByIsRequired                                                        = NewBusinessError(ErrorCodeCanceledByIsRequired, "CanceledBy is required")
	CanceledReasonIsRequired                                                    = NewBusinessError(ErrorCodeCanceledReasonIsRequired, "CanceledReason is required")
	CannotActivateMultipleCards                                                 = NewBusinessError(ErrorCodeCannotActivateMultipleCards, "cannot activate multiple cards")
	CannotAssignGlobalPermissionToProductBasedRole                              = NewBusinessError(ErrorCodeCannotAssignGlobalPermissionToProductBasedRole, "cannot assign global permission to product based role")
	CannotAssignProductBasedPermissionToGlobalRole                              = NewBusinessError(ErrorCodeCannotAssignProductBasedPermissionToGlobalRole, "cannot assign product based permission to global role")
	CannotCreateUserWithThisPhoneNumber                                         = NewBusinessError(ErrorCodeCannotCreateUserWithThisPhoneNumber, "cannot create user with this phone number")
	CannotExceedMaximumLimits                                                   = NewBusinessError(ErrorCodeCannotExceedMaximumLimits, "can not exceed maximum limits")
	CannotGenerateReferenceNumbers                                              = NewBusinessError(ErrorCodeCannotGenerateReferenceNumbers, "cannot generate reference numbers, it goes over the allowed numbers")
	CannotGenerateZeroNumbers                                                   = NewBusinessError(ErrorCodeCannotGenerateZeroNumbers, "cannot generate 0 numbers")
	CannotPerformGenerateInvoiceOnRefundFee                                     = NewBusinessError(ErrorCodeCannotPerformGenerateInvoiceOnRefundFee, "cannot perform generate invoice on refund fee")
	CannotPerformRefundForRefundFee                                             = NewBusinessError(ErrorCodeCannotPerformRefundForRefundFee, "cannot perform refund for refund fee")
	CannotResendKYCVerificationSMSInvalidStatus                                 = NewBusinessError(ErrorCodeCannotResendKYCVerificationSMSInvalidStatus, "kyc verification status must be not confirmed or failed to resend verification SMS")
	CannotSkipValueWithoutDefaultProductSettingsSource                          = NewBusinessError(ErrorCodeCannotSkipValueWithoutDefaultProductSettingsSource, "cannot skip value without default product settings source")
	CannotTransferToSameAccount                                                 = NewBusinessError(ErrorCodeCannotTransferToSameAccount, "cannot transfer to same account")
	CannotUpdateCompletedPaymentFileRecord                                      = NewBusinessError(ErrorCodeCannotUpdateCompletedPaymentFileRecord, "cannot update completed payment file record")
	CannotUpdateEmptyCardFeesBatch                                              = NewBusinessError(ErrorCodeCannotUpdateEmptyCardFeesBatch, "cannot update empty card fees batch")
	Card3DSecureIsNotEnabled                                                    = NewBusinessError(ErrorCodeCard3DSecureIsNotEnabled, "card 3D secure is not enabled")
	Card3DSecureMobileHasInvalidFormat                                          = NewBusinessError(ErrorCodeCard3DSecureMobileHasInvalidFormat, "card 3D secure mobile has invalid format")
	Card3DSecureMobileIsRequired                                                = NewBusinessError(ErrorCodeCard3DSecureMobileIsRequired, "card 3D secure mobile is required")
	Card3DSecureMobileOrEmailOrOutOfBandEnabledIsRequired                       = NewBusinessError(ErrorCodeCard3DSecureMobileOrEmailOrOutOfBandEnabledIsRequired, "card 3D secure Mobile or Email or OutOfBandEnabled is required")
	Card3DSecureOTPEmailAndOutOfBandAreDisabledForProduct                       = NewBusinessError(ErrorCodeCard3DSecureOTPEmailAndOutOfBandAreDisabledForProduct, "card 3D secure OTP Email and OutOfBand are disabled for product")
	Card3DSecureOTPSMSAndOTPEmailIsDisabledForProduct                           = NewBusinessError(ErrorCodeCard3DSecureOTPSMSAndOTPEmailAreDisabledForProduct, "card 3D secure OTP SMS and OTP Email are disabled for product")
	Card3DSecureOTPSMSAndOutOfBandAreDisabledForProduct                         = NewBusinessError(ErrorCodeCard3DSecureOTPSMSAndOutOfBandAreDisabledForProduct, "card 3D secure OTP SMS and OutOfBand are disabled for product")
	Card3DSecureOutOfBandEnabledMustBeSetToTrue                                 = NewBusinessError(ErrorCodeCard3DSecureOutOfBandEnabledMustBeSetToTrue, "Card3DSecureOutOfBandEnabled must be set to true")
	Card3DSecurePasswordIsEmpty                                                 = NewBusinessError(ErrorCodeCard3DSecurePasswordIsEmpty, "card 3D secure password is empty")
	Card3DSecurePasswordIsRequiredInCaseOfSMSOTPAndStaticPasswordType           = NewBusinessError(ErrorCodeCard3DSecurePasswordIsRequiredInCaseOfSMSOTPAndStaticPasswordType, "card 3D secure password is required in case of SMSOTPAndStaticPassword type")
	Card3DSecurePasswordMustBeMaximumOf36CharsInLength                          = NewBusinessError(ErrorCodeCard3DSecurePasswordMustBeMaximumOf36CharsInLength, "card 3D secure password must be maximum of 36 characters in length")
	Card3DSecurePasswordMustBeMinimumOf8CharsInLength                           = NewBusinessError(ErrorCodeCard3DSecurePasswordMustBeMinimumOf8CharsInLength, "Card3DSecurePassword must be minimum of 8 characters in length")
	Card3DSecureProviderCardNotFound                                            = NewBusinessError(ErrorCodeCard3DSecureProviderCardNotFound, "card 3D secure provider card not found")
	Card3DSecureProviderIsRequired                                              = NewBusinessError(ErrorCodeCard3DSecureProviderIsRequired, "card 3D secure provider is required")
	Card3DSecureProviderNotSupported                                            = NewBusinessError(ErrorCodeCard3DSecureProviderNotSupported, "card 3D secure provider not supported")
	Card3DSecureProviderProfileNotFound                                         = NewBusinessError(ErrorCodeCard3DSecureProviderProfileNotFound, "card 3D secure provider profile not found")
	Card3DSecureSettingsAreDisabledForProduct                                   = NewBusinessError(ErrorCodeCard3DSecureSettingsAreDisabledForProduct, "card 3ds settings are disabled for given product")
	Card3DSecureSettingsIsRequired                                              = NewBusinessError(ErrorCodeCard3DSecureSettingsIsRequired, "Card3DSecureSettings is required")
	Card3DSecureSettingsIsRequiredInCaseOfCardIsActivatedFor3DSecure            = NewBusinessError(ErrorCodeCard3DSecureSettingsIsRequiredInCaseOfCardIsActivatedFor3DSecure, "Card3DSecureSettings is required in case of card is activated for 3D secure")
	Card3DSecureSettingsNotFound                                                = NewBusinessError(ErrorCodeCard3DSecureSettingsNotFound, "no card 3D secure settings found")
	Card3DSecureTypeIsRequired                                                  = NewBusinessError(ErrorCodeCard3DSecureTypeIsRequired, "card 3D secure type is required")
	CardActivateNotAllowed                                                      = NewBusinessError(ErrorCodeCardActivateNotAllowed, "card cannot be activated")
	CardActivationNotAllowedWithout3DS                                          = NewBusinessError(ErrorCodeCardActivationNotAllowedWithout3DS, "card activation is not allowed if 3DS settings are not provided and product has 3DS enabled")
	CardAlreadyLinkedToAccount                                                  = NewBusinessError(ErrorCodeCardAlreadyLinkedToAccount, "card already linked to account")
	CardAlreadyRenewed                                                          = NewBusinessError(ErrorCodeCardAlreadyRenewed, "card already renewed")
	CardAlreadyReplaced                                                         = NewBusinessError(ErrorCodeCardAlreadyReplaced, "card already replaced")
	CardArtRefIDIsInNotUUID4Format                                              = NewBusinessError(ErrorCodeCardArtRefIDIsInNotUUID4Format, "CardArtRefID is not in UUID4 format")
	CardBlockTypeIsRequired                                                     = NewBusinessError(ErrorCodeCardBlockTypeIsRequired, "BlockType is required")
	CardBlockTypeNotFound                                                       = NewBusinessError(ErrorCodeCardBlockTypeNotFound, "card block type is not found")
	CardCarrierTypeIsNotAllowed                                                 = NewBusinessError(ErrorCodeCardCarrierTypeIsNotAllowed, "card carrier type is not allowed")
	CardCarrierTypeIsNotAllowedByProductSettings                                = NewBusinessError(ErrorCodeCardCarrierTypeIsNotAllowedByProductSettings, "card carrier type is not allowed by product settings")
	CardDataNotFound                                                            = NewBusinessError(ErrorCodeCardDataNotFound, "card data not found")
	CardDesignNotFound                                                          = NewBusinessError(ErrorCodeCardDesignNotFound, "card design not found")
	CardDoesNotHavePIN                                                          = NewBusinessError(ErrorCodeCardDoesNotHavePIN, "card does not have PIN yet")
	CardFeeWaiversAreRequired                                                   = NewBusinessError(ErrorCodeCardFeeWaiversAreRequired, "CardFeeWaivers are required")
	CardFeeWaiversUsageIsRequired                                               = NewBusinessError(ErrorCodeCardFeeWaiversUsageIsRequired, "CardFeeWaiversUsage is required")
	CardHasBeenProcessedForPersonalization                                      = NewBusinessError(ErrorCodeCardHasBeenProcessedForPersonalization, "card has been processed for personalization")
	CardHolderNotFound                                                          = NewBusinessError(ErrorCodeCardHolderNotFound, "no cardholder found")
	CardIDErrorMessagePairsIsRequired                                           = NewBusinessError(ErrorCodeCardIDErrorMessagePairsIsRequired, "CardIDErrorMessagePairs is required")
	CardIDIsDuplicate                                                           = NewBusinessError(ErrorCodeCardIDIsDuplicate, "CardID is duplicate")
	CardIDIsNotFound                                                            = NewBusinessError(ErrorCodeCardIDIsNotFound, "CardID is not found")
	CardIDIsRequired                                                            = NewBusinessError(ErrorCodeCardIDIsRequired, "cardID is required")
	CardIDNotInUUID4Format                                                      = NewBusinessError(ErrorCodeCardIDNotInUUID4Format, "CardID is not in UUID4 format")
	CardIDPINBlockPairsIsRequired                                               = NewBusinessError(ErrorCodeCardIDPINBlockPairsIsRequired, "CardIDPINBlockPairs is required")
	CardIDProductIDPairsIsRequired                                              = NewBusinessError(ErrorCodeCardIDProductIDPairsIsRequired, "CardIDProductIDPairs is required")
	CardIDTrackingNumberPairsAreRequired                                        = NewBusinessError(ErrorCodeCardIDTrackingNumberPairsAreRequired, "CardIDTrackingNumberPairs are required")
	CardIDsIsRequired                                                           = NewBusinessError(ErrorCodeCardIDsIsRequired, "CardIDs is required")
	CardIsAlreadyEnrolledFor3DSecure                                            = NewBusinessError(ErrorCodeCardIsAlreadyEnrolledFor3DSecure, "card is already enrolled for 3D secure")
	CardIsBlocked                                                               = NewBusinessError(ErrorCodeCardIsBlocked, "card is blocked")
	CardIsClosed                                                                = NewBusinessError(ErrorCodeCardIsClosed, "card is closed")
	CardIsClosing                                                               = NewBusinessError(ErrorCodeCardIsClosing, "card is in closing state")
	CardIsExpired                                                               = NewBusinessError(ErrorCodeCardIsExpired, "card is expired")
	CardIsFrozen                                                                = NewBusinessError(ErrorCodeCardIsFrozen, "card is frozen")
	CardIsHardblocked                                                           = NewBusinessError(ErrorCodeCardIsHardblocked, "card is hardblocked")
	CardIsLinkedToAnAccount                                                     = NewBusinessError(ErrorCodeCardIsLinkedToAnAccount, "card has an account linked already")
	CardIsNotBlocked                                                            = NewBusinessError(ErrorCodeCardIsNotBlocked, "card is not blocked")
	CardIsNotEnrolledFor3DSecure                                                = NewBusinessError(ErrorCodeCardIsNotEnrolledFor3DSecure, "card is not enrolled for 3D secure")
	CardIsNotLinkedToAnAccount                                                  = NewBusinessError(ErrorCodeCardIsNotLinkedToAnAccount, "card is not linked to an account")
	CardIsRequired                                                              = NewBusinessError(ErrorCodeCardIsRequired, "Card is required")
	CardLifecycleNotificationEventIsNotAllowed                                  = NewBusinessError(ErrorCodeCardLifecycleNotificationEventIsNotAllowed, "Card lifecycle notification event is not allowed")
	CardLimitsCannotBeNegative                                                  = NewBusinessError(ErrorCodeCardLimitsCannotBeNegative, "card limits cannot be negative")
	CardLimitsCannotExceedAccountLimits                                         = NewBusinessError(ErrorCodeCardLimitsCannotExceedAccountLimits, "card limits cannot exceed account limits")
	CardLimitsCannotExceedMaximumLimits                                         = NewBusinessError(ErrorCodeCardLimitsCannotExceedMaximumLimits, "card limits cannot exceed maximum limits")
	CardMerchantRuleAlreadyExists                                               = NewBusinessError(ErrorCodeCardMerchantRuleAlreadyExists, "merchant rule already exists")
	CardMerchantRuleAlreadyExistsForTypeAndValue                                = NewBusinessError(ErrorCodeCardMerchantRuleAlreadyExistsForTypeAndValue, "card merchant rule already exists for type and value")
	CardMerchantRuleIDIsRequired                                                = NewBusinessError(ErrorCodeCardMerchantRuleIDIsRequired, "CardMerchantRuleID is required")
	CardMerchantRuleIDNotInUUID4Format                                          = NewBusinessError(ErrorCodeCardMerchantRuleIDNotInUUID4Format, "CardMerchantRuleID is not in UUID4 format")
	CardMerchantRuleIsDeleted                                                   = NewBusinessError(ErrorCodeCardMerchantRuleIsDeleted, "card merchant rule is deleted")
	CardMerchantRuleMustBeEitherWhitelistOrBlacklist                            = NewBusinessError(ErrorCodeCardMerchantRuleMustBeEitherWhitelistOrBlacklist, "card merchant rule must be either whitelist or blacklist")
	CardMerchantRuleNotFound                                                    = NewBusinessError(ErrorCodeCardMerchantRuleNotFound, "card merchant rule not found")
	CardMerchantRuleTypeIsNotWithinAllowedRange                                 = NewBusinessError(ErrorCodeCardMerchantRuleTypeIsNotWithinAllowedRange, "CardMerchantRuleType is not within allowed range")
	CardMerchantRuleTypeIsRequired                                              = NewBusinessError(ErrorCodeCardMerchantRuleTypeIsRequired, "CardMerchantRuleType is required")
	CardMerchantRuleValueMustBeMaximum255CharsInLength                          = NewBusinessError(ErrorCodeCardMerchantRuleValueMustBeMaximum255CharsInLength, "card merchant rule value must be maximum 255 chars in length")
	CardMerchantRulesAreRequired                                                = NewBusinessError(ErrorCodeCardMerchantRulesAreRequired, "CardMerchantRules are required")
	CardMerchantRulesNotFound                                                   = NewBusinessError(ErrorCodeCardMerchantRulesNotFound, "card merchant rules not found")
	CardMetadataProfileAlreadyExists                                            = NewBusinessError(ErrorCodeCardMetadataProfileAlreadyExists, "card metadata profile already exists")
	CardMetadataProfileIDIsNotUUID4Format                                       = NewBusinessError(ErrorCodeCardMetadataProfileIDIsNotUUID4Format, "CardMetadataProfileID is not in UUID4 format")
	CardMetadataProfileIDIsRequired                                             = NewBusinessError(ErrorCodeCardMetadataProfileIDIsRequired, "CardMetadataProfileID is required")
	CardMetadataProfileIDNotFound                                               = NewBusinessError(ErrorCodeCardMetadataProfileIDNotFound, "Card metadata profile ID not found")
	CardMetadataProfileNameIsRequired                                           = NewBusinessError(ErrorCodeCardMetadataProfileNameIsRequired, "CardMetadataProfileName is required")
	CardMetadataProfileNotFound                                                 = NewBusinessError(ErrorCodeCardMetadataProfileNotFound, "card metadata profile not found")
	CardMetadataProfilePersonalizationProductCodeIsRequired                     = NewBusinessError(ErrorCodeCardMetadataProfilePersonalizationProductCodeIsRequired, "CardMetadataProfilePersonalizationProductCode is required")
	CardMetadataProfileProfileIDIsInvalid                                       = NewBusinessError(ErrorCodeCardMetadataProfileProfileIDIsInvalid, "CardMetadataProfileProfileID is invalid")
	CardMetadataProfileProfileIDIsRequired                                      = NewBusinessError(ErrorCodeCardMetadataProfileProfileIDIsRequired, "CardMetadataProfileProfileID is required")
	CardMetadataProfilesNotFound                                                = NewBusinessError(ErrorCodeCardMetadataProfilesNotFound, "card metadata profiles not found")
	CardMetadataUpdateUniqueIDsIsRequired                                       = NewBusinessError(ErrorCodeCardMetadataUpdateUniqueIDsIsRequired, "tokenRequestorID and tokenReferenceID or panReferenceID or encryptedData is required")
	CardMustHaveCreatedStatusToMarkItAsProduced                                 = NewBusinessError(ErrorCodeCardMustHaveCreatedStatusToMarkItAsProduced, "card must have created status to mark it as produced")
	CardMustHaveCreatedStatusToUpdateTheDeliveryAddress                         = NewBusinessError(ErrorCodeCardMustHaveCreatedStatusToUpdateTheDeliveryAddress, "card must have created status to update the delivery address")
	CardNotFound                                                                = NewBusinessError(ErrorCodeCardNotFound, "no card found")
	CardNotificationSettingsAreRequired                                         = NewBusinessError(ErrorCodeCardNotificationSettingsAreRequired, "card notification settings are required")
	CardNumberIsInvalid                                                         = NewBusinessError(ErrorCodeCardNumberIsInvalid, "card number is invalid")
	CardNumberIsRequired                                                        = NewBusinessError(ErrorCodeCardNumberIsRequired, "card number is required")
	CardNumberNotFound                                                          = NewBusinessError(ErrorCodeCardNumberNotFound, "no card number found")
	CardNumbersAreRequired                                                      = NewBusinessError(ErrorCodeCardNumbersAreRequired, "card numbers are required")
	CardOwnerIDNotInUUID4Format                                                 = NewBusinessError(ErrorCodeCardOwnerIDNotInUUID4Format, "CardOwnerID is not in UUID4 format")
	CardOwnerNameMustBeMaximum201CharactersInLength                             = NewBusinessError(ErrorCodeCardOwnerNameMustBeMaximum201CharactersInLength, "CardOwnerName must be maximum 201 characters in length")
	CardPINCodeMustBeAtLeast4DigitsInLen                                        = NewBusinessError(ErrorCodeCardPINCodeMustBeAtLeast4DigitsInLen, "card PIN code must be at least 4 digits in length")
	CardPINCodeMustBeMax12DigitsInLen                                           = NewBusinessError(ErrorCodeCardPINCodeMustBeMax12DigitsInLen, "card PIN code must be maximum 12 digits in length")
	CardPINCodeMustContainOnlyDigits                                            = NewBusinessError(ErrorCodeCardPINCodeMustContainOnlyDigits, "card PIN code must contain only digits")
	CardPINCodeMustNotHaveSameDigits                                            = NewBusinessError(ErrorCodeCardPINCodeMustNotHaveSameDigits, "card PIN code must not have same digits")
	CardPINCodeMustNotHaveSameOrSequentialDigits                                = NewBusinessError(ErrorCodeCardPINCodeMustNotHaveSameOrSequentialDigits, "card PIN code must not have same or sequential digits")
	CardPINCodeMustNotHaveSequentialDigits                                      = NewBusinessError(ErrorCodeCardPINCodeMustNotHaveSequentialDigits, "card PIN code must not have sequential digits")
	CardProcessorCardIDIsRequired                                               = NewBusinessError(ErrorCodeCardProcessorCardIDIsRequired, "CardProcessorCardID is required")
	CardProcessorCardIDsAreRequired                                             = NewBusinessError(ErrorCodeCardProcessorCardIDsAreRequired, "CardProcessorCardIDs are required")
	CardProcessorContractIDIsRequired                                           = NewBusinessError(ErrorCodeCardProcessorContractIDIsRequired, "card processor contract ID is required")
	CardProcessorIDIsRequired                                                   = NewBusinessError(ErrorCodeCardProcessorIDIsRequired, "card processor ID is required")
	CardProcessorIsRequired                                                     = NewBusinessError(ErrorCodeCardProcessorIsRequired, "Processor is required")
	CardProcessorNotFound                                                       = NewBusinessError(ErrorCodeCardProcessorNotFound, "Processor not found")
	CardProcessorTransactionIDIsRequired                                        = NewBusinessError(ErrorCodeCardProcessorTransactionIDIsRequired, "CardProcessorTransactionID is required")
	CardRenewalAllowedForActiveStatusOnly                                       = NewBusinessError(ErrorCodeCardRenewalAllowedForActiveStatusOnly, "card renewal allowed for active status only")
	CardRenewalIsNotAllowedBecauseCardIsNotCloseToExpire                        = NewBusinessError(ErrorCodeCardRenewalIsNotAllowedBecauseCardIsNotCloseToExpire, "card renewal is not allowed because card is not close to expire")
	CardSoftBlockNotAllowed                                                     = NewBusinessError(ErrorCodeCardSoftBlockNotAllowed, "card soft block is not allowed for created, ordered, personalized and dispatched card statuses")
	CardSpendingAmountIsNotWithinAllowedRange                                   = NewBusinessError(ErrorCodeCardSpendingAmountIsNotWithinAllowedRange, "CardSpendingAmount is not within allowed range")
	CardSpendingAmountIsRequired                                                = NewBusinessError(ErrorCodeCardSpendingAmountIsRequired, "CardSpendingAmount is required")
	CardStatusIsInvalid                                                         = NewBusinessError(ErrorCodeCardStatusIsInvalid, "card status is invalid")
	CardStatusIsRequired                                                        = NewBusinessError(ErrorCodeCardStatusIsRequired, "card status is required")
	CardStatusNotFound                                                          = NewBusinessError(ErrorCodeCardStatusNotFound, "card status is not found")
	CardStatusesAreRequired                                                     = NewBusinessError(ErrorCodeCardStatusesAreRequired, "card statuses are required")
	CardStepUpMethodNotFound                                                    = NewBusinessError(ErrorCodeCardStepUpMethodNotFound, "card step up method not found")
	CardTypeChipAndPinAnonymousAnd3DSecureSettingsNotAllowed                    = NewBusinessError(ErrorCodeCardTypeChipAndPinAnonymousAnd3DSecureSettingsNotAllowed, "CardTypeChipAndPinAnonymous does not allow 3D secure settings")
	CardTypeChipAndPinAnonymousAndAccountIDNotAllowed                           = NewBusinessError(ErrorCodeCardTypeChipAndPinAnonymousAndAccountIDNotAllowed, "CardTypeChipAndPinAnonymous does not allow AccountID")
	CardTypeChipAndPinAnonymousIsNotAllowed                                     = NewBusinessError(ErrorCodeCardTypeChipAndPinAnonymousIsNotAllowed, "CardTypeChipAndPinAnonymous is not allowed")
	CardTypeChipAndPinRequiresAccountID                                         = NewBusinessError(ErrorCodeCardTypeChipAndPinRequiresAccountID, "CardTypeChipAndPin requires AccountID")
	CardTypeNotAllowed                                                          = NewBusinessError(ErrorCodeCardTypeNotAllowed, "card type is not allowed for product")
	CardTypeNotAllowedToSendSMS                                                 = NewBusinessError(ErrorCodeCardTypeNotAllowedToSendSMS, "card type not allowed to send SMS")
	CardTypeVirtualRequiresAccountID                                            = NewBusinessError(ErrorCodeCardTypeVirtualRequiresAccountID, "CardTypeVirtual requires AccountID")
	CardWasBlockedByAnotherUser                                                 = NewBusinessError(ErrorCodeCardWasBlockedByAnotherUser, "card was blocked by another user")
	Cardholder3DSSettingsNotFound                                               = NewBusinessError(ErrorCodeCardholder3DSSettingsNotFound, "cardholder 3DS settings not found")
	CardholderUserAgentMustHaveLimitedLength                                    = NewBusinessError(ErrorCodeCardholderUserAgentMustHaveLimitedLength, "Cardholder user agent must have limited length")
	CardsNotFound                                                               = NewBusinessError(ErrorCodeCardsNotFound, "no cards found")
	CaseStatusIsNotWithinAllowedRange                                           = NewBusinessError(ErrorCodeCaseStatusIsNotWithinAllowedRange, "CaseStatus is not within allowed range")
	CasesCountMustBe9223372036854775806OrLess                                   = NewBusinessError(ErrorCodeCasesCountMustBe9223372036854775806OrLess, "CasesCount must be 9223372036854775806 or less")
	CasesCountMustBePositiveNumber                                              = NewBusinessError(ErrorCodeCasesCountMustBePositiveNumber, "CasesCount must be positive number")
	CertificatesCannotBeEmpty                                                   = NewBusinessError(ErrorCodeCertificatesCannotBeEmpty, "Certificates cannot be empty")
	ChallengeExpired                                                            = NewBusinessError(ErrorCodeChallengeExpired, "challenge expired")
	ChallengeNotFound                                                           = NewBusinessError(ErrorCodeChallengeNotFound, "challenge not found")
	ChallengeTypeIsNotWithinAllowedRange                                        = NewBusinessError(ErrorCodeChallengeTypeIsNotWithinAllowedRange, "challenge_type is not within allowed range")
	ChallengeTypeIsRequired                                                     = NewBusinessError(ErrorCodeChallengeTypeIsRequired, "challenge type is required")
	ChallengeValueIsRequired                                                    = NewBusinessError(ErrorCodeChallengeValueIsRequired, "challenge value is required")
	ChangingBoardMembersIsNotAllowed                                            = NewBusinessError(ErrorCodeChangingBoardMembersIsNotAllowed, "changing board members is not allowed")
	ChangingCorporateDocumentsIsNotAllowed                                      = NewBusinessError(ErrorCodeChangingCorporateDocumentsIsNotAllowed, "changing corporate documents is not allowed")
	ChangingShareholdersIsNotAllowed                                            = NewBusinessError(ErrorCodeChangingShareholdersIsNotAllowed, "changing shareholders is not allowed")
	ChipAndPinCardCannotBeCreatedWithVirtualPersonalizationProductCodes         = NewBusinessError(ErrorCodeChipAndPinCardCannotBeCreatedWithVirtualPersonalizationProductCodes, "ChipAndPIN card can't be created with Virtual Personalization Product Codes")
	CitizenshipCountryCodeIsNotWithinAllowedRange                               = NewBusinessError(ErrorCodeCitizenshipCountryCodeIsNotWithinAllowedRange, "CitizenshipCountryCode is not within allowed range")
	CityCountyIsRequired                                                        = NewBusinessError(ErrorCodeCityCountyIsRequired, "CityCounty is required")
	CityIsRequired                                                              = NewBusinessError(ErrorCodeCityIsRequired, "City is required")
	CityMustBeMax35CharsInLen                                                   = NewBusinessError(ErrorCodeCityMustBeMax35CharsInLen, "City must be maximum of 35 characters in length")
	ClearingErrorTypeIsNotWithinAllowedRange                                    = NewBusinessError(ErrorCodeClearingErrorTypeIsNotWithinAllowedRange, "ClearingErrorType is not within allowed range")
	ClientAgreementAlreadySigned                                                = NewBusinessError(ErrorCodeClientAgreementAlreadySigned, "client agreement already signed")
	ClientAgreementIsNotSignedYet                                               = NewBusinessError(ErrorCodeClientAgreementIsNotSignedYet, "client agreement is not signed yet")
	ClientAppIDIsRequired                                                       = NewBusinessError(ErrorCodeClientAppIDIsRequired, "ClientAppID is required")
	ClientBoardMembersCannotBeApproved                                          = NewBusinessError(ErrorCodeClientBoardMembersCannotBeApproved, "client board members cannot be approved")
	ClientCannotBeApproved                                                      = NewBusinessError(ErrorCodeClientCannotBeApproved, "client cannot be approved")
	ClientCompanyConditionFailed                                                = NewBusinessError(ErrorCodeClientCompanyConditionFailed, "client company condition failed")
	ClientConditionFailed                                                       = NewBusinessError(ErrorCodeClientConditionFailed, "client condition failed")
	ClientDeviceIDIsRequired                                                    = NewBusinessError(ErrorCodeClientDeviceIDIsRequired, "ClientDeviceID is required")
	ClientHasActiveProduct                                                      = NewBusinessError(ErrorCodeClientHasActiveProduct, "client has active product")
	ClientIDIsRequired                                                          = NewBusinessError(ErrorCodeClientIDIsRequired, "ClientID is required")
	ClientIDNotInUUID4Format                                                    = NewBusinessError(ErrorCodeClientIDNotInUUID4Format, "ClientID is not in UUID4 format")
	ClientInformationVerificationIsNotAllowed                                   = NewBusinessError(ErrorCodeClientInformationVerificationIsNotAllowed, "client information verification is not allowed")
	ClientIsAlreadyDeleted                                                      = NewBusinessError(ErrorCodeClientIsAlreadyDeleted, "client is already deleted")
	ClientIsAlreadyFrozen                                                       = NewBusinessError(ErrorCodeClientIsAlreadyFrozen, "client is already frozen")
	ClientIsDeleted                                                             = NewBusinessError(ErrorCodeClientIsDeleted, "client is deleted")
	ClientIsFrozen                                                              = NewBusinessError(ErrorCodeClientIsFrozen, "client is frozen")
	ClientIsNotVerified                                                         = NewBusinessError(ErrorCodeClientIsNotVerified, "client is not verified")
	ClientMustHaveAtLeastOneBoardMemberWithFilledMandatoryFields                = NewBusinessError(ErrorCodeClientMustHaveAtLeastOneBoardMemberWithFilledMandatoryFields, "client must have at least one board member with filled mandatory fields")
	ClientMustNotBeWhiteLabel                                                   = NewBusinessError(ErrorCodeClientMustNotBeWhiteLabel, "client must not be white label")
	ClientNameAlreadyExists                                                     = NewBusinessError(ErrorCodeClientNameAlreadyExists, "client name already exists")
	ClientNameContainsRestrictedCharacters                                      = NewBusinessError(ErrorCodeClientNameContainsRestrictedCharacters, "client name contains restricted characters")
	ClientNotFound                                                              = NewBusinessError(ErrorCodeClientNotFound, "client not found")
	ClientPersonAlreadyExists                                                   = NewBusinessError(ErrorCodeClientPersonAlreadyExists, "client person already exists")
	ClientPersonConditionFailed                                                 = NewBusinessError(ErrorCodeClientPersonConditionFailed, "client person condition failed")
	ClientRejected                                                              = NewBusinessError(ErrorCodeClientRejected, "client rejected")
	ClientRequestTimeoutMillisecondsMustBeMaximum4096CharsInLength              = NewBusinessError(ErrorCodeClientRequestTimeoutMillisecondsMustBeMaximum4096CharsInLength, "ClientRequestTimeoutMilliseconds must be maximum of 4096 characters in length")
	ClientRequestTimeoutMillisecondsShouldBePositive                            = NewBusinessError(ErrorCodeClientRequestTimeoutMillisecondsShouldBePositive, "ClientRequestTimeoutMilliseconds should be positive number")
	ClientSettlementRiskLimitIDIsNotInUUID4Format                               = NewBusinessError(ErrorCodeClientSettlementRiskLimitIDIsNotInUUID4Format, "ClientSettlementRiskLimitID is not in UUID4 format")
	ClientSettlementRiskLimitIDIsRequired                                       = NewBusinessError(ErrorCodeClientSettlementRiskLimitIDIsRequired, "ClientSettlementRiskLimitID is required")
	ClientShareholdersCannotBeApproved                                          = NewBusinessError(ErrorCodeClientShareholdersCannotBeApproved, "client shareholders cannot be approved")
	ClientStatusMustBeActive                                                    = NewBusinessError(ErrorCodeClientStatusMustBeActive, "Client status must be active")
	ClientTypeIsNotAllowed                                                      = NewBusinessError(ErrorCodeClientTypeIsNotAllowed, "client type is not allowed")
	ClientTypeIsNotWithinAllowedRange                                           = NewBusinessError(ErrorCodeClientTypeIsNotWithinAllowedRange, "client type is not within allowed range")
	ClientWalletAccountIDIsRequired                                             = NewBusinessError(ErrorCodeClientWalletAccountIDIsRequired, "ClientWalletAccountID is required")
	CloseReasonIsNotWithinAllowedRange                                          = NewBusinessError(ErrorCodeCloseReasonIsNotWithinAllowedRange, "close reason is not within allowed range")
	CloseReasonIsRequired                                                       = NewBusinessError(ErrorCodeCloseReasonIsRequired, "close reason is required")
	CommentIsRequired                                                           = NewBusinessError(ErrorCodeCommentIsRequired, "comment is required")
	CommentMustBeMax256CharsInLen                                               = NewBusinessError(ErrorCodeCommentMustBeMax256CharsInLen, "Comment must be maximum of 256 characters in length")
	CommunicationLanguageCodeIsNotWithinAllowedRange                            = NewBusinessError(ErrorCodeCommunicationLanguageCodeIsNotWithinAllowedRange, "communication language code is not within allowed range")
	CommunicationLogsNotFound                                                   = NewBusinessError(ErrorCodeCommunicationLogsNotFound, "no communication logs found")
	CompanyHasActiveRepresentatives                                             = NewBusinessError(ErrorCodeCompanyHasActiveRepresentatives, "Company has active representatives")
	CompanyHasActiveUsers                                                       = NewBusinessError(ErrorCodeCompanyHasActiveUsers, "Company has active users")
	CompanyHasOpenedAccounts                                                    = NewBusinessError(ErrorCodeCompanyHasOpenedAccounts, "Company has opened accounts")
	CompanyIDIsRequired                                                         = NewBusinessError(ErrorCodeCompanyIDIsRequired, "CompanyID is required")
	CompanyIDNotInUUID4Format                                                   = NewBusinessError(ErrorCodeCompanyIDNotInUUID4Format, "CompanyID not in UUID4 format")
	CompanyIsAlreadyFrozen                                                      = NewBusinessError(ErrorCodeCompanyIsAlreadyFrozen, "company is already frozen")
	CompanyIsDeactivated                                                        = NewBusinessError(ErrorCodeCompanyIsDeactivated, "Company is deactivated")
	CompanyIsDeleted                                                            = NewBusinessError(ErrorCodeCompanyIsDeleted, "company is deleted")
	CompanyIsRequired                                                           = NewBusinessError(ErrorCodeCompanyIsRequired, "Company is required")
	CompanyMustHaveAtLeastOneBoardMemberWithFilledMandatoryFields               = NewBusinessError(ErrorCodeCompanyMustHaveAtLeastOneBoardMemberWithFilledMandatoryFields, "Company must have at least one board member with filled mandatory fields")
	CompanyMustHaveAtLeastOneRepresentative                                     = NewBusinessError(ErrorCodeCompanyMustHaveAtLeastOneRepresentative, "Company must have at least one representative")
	CompanyMustHaveKYBStatusVerified                                            = NewBusinessError(ErrorCodeCompanyMustHaveKYBStatusVerified, "company must have KYB status Verified")
	CompanyNameIsRequired                                                       = NewBusinessError(ErrorCodeCompanyNameIsRequired, "CompanyName is required")
	CompanyNameMustBeAtLeast2CharsInLen                                         = NewBusinessError(ErrorCodeCompanyNameMustBeAtLeast2CharsInLen, "CompanyName must be at least 2 characters in length")
	CompanyNameMustBeAtLeast5CharsInLen                                         = NewBusinessError(ErrorCodeCompanyNameMustBeAtLeast5CharsInLen, "Company name must be at least 5 characters in length")
	CompanyNameMustBeMax45CharsInLen                                            = NewBusinessError(ErrorCodeCompanyNameMustBeMax45CharsInLen, "Company name must be maximum of 45 characters in length")
	CompanyNameMustBeMaximum100CharactersInLength                               = NewBusinessError(ErrorCodeCompanyNameMustBeMaximum100CharactersInLength, "Company name must be maximum of 100 characters in length")
	CompanyNotFound                                                             = NewBusinessError(ErrorCodeCompanyNotFound, "no company found")
	CompanyRegistrationNumberMustBeMaximum100CharactersInLength                 = NewBusinessError(ErrorCodeCompanyRegistrationNumberMustBeMaximum100CharactersInLength, "Company registration number must be maximum of 100 characters in length")
	CompanyStatusNotWithinAllowedRange                                          = NewBusinessError(ErrorCodeCompanyStatusNotWithinAllowedRange, "company status is not within allowed range")
	CompanyTransfersAllowOnlyForTrustCompanies                                  = NewBusinessError(ErrorCodeCompanyTransferAllowedOnlyForTrustCompanies, "Company transfers allowed only for companies from trust list")
	CompletedAtIsRequired                                                       = NewBusinessError(ErrorCodeCompletedAtIsRequired, "CompletedAt is required")
	ConnectionIDIsRequired                                                      = NewBusinessError(ErrorCodeConnectionIDIsRequired, "ConnectionID is required")
	ConsumerProgramIsRequired                                                   = NewBusinessError(ErrorCodeConsumerProgramIsRequired, "Consumer Program is required")
	ContactEmailHasInvalidFormat                                                = NewBusinessError(ErrorCodeContactEmailHasInvalidFormat, "ContactEmail has invalid format")
	ContactEmailIsRequired                                                      = NewBusinessError(ErrorCodeContactEmailIsRequired, "ContactEmail is required")
	ContactEmailMustBeMaximum255CharsInLength                                   = NewBusinessError(ErrorCodeContactEmailMustBeMaximum255CharsInLength, "ContactEmail must be maximum 255 characters in length")
	ContactMobileHasInvalidFormat                                               = NewBusinessError(ErrorCodeContactMobileHasInvalidFormat, "ContactMobile has invalid format")
	ContactMobileIsRequired                                                     = NewBusinessError(ErrorCodeContactMobileIsRequired, "ContactMobile is required")
	ContactMobileMustBeMaximum30CharsInLength                                   = NewBusinessError(ErrorCodeContactMobileMustBeMaximum30CharsInLength, "ContactMobile must be maximum 30 characters in length")
	ContentIsRequired                                                           = NewBusinessError(ErrorCodeContentIsRequired, "content is required")
	CorporateDocumentConditionFailed                                            = NewBusinessError(ErrorCodeCorporateDocumentConditionFailed, "corporate document condition failed")
	CorporateDocumentFileSizeExceedsMaximumFileSize                             = NewBusinessError(ErrorCodeCorporateDocumentFileSizeExceedsMaximumFileSize, "corporate document file size exceeds maximum file size")
	CorporateDocumentIDIsRequired                                               = NewBusinessError(ErrorCodeCorporateDocumentIDIsRequired, "CorporateDocumentID is required")
	CorporateDocumentIDNotInUUID4Format                                         = NewBusinessError(ErrorCodeCorporateDocumentIDNotInUUID4Format, "CorporateDocumentID not in UUID4 format")
	CorporateDocumentIsNotWithinAllowedRange                                    = NewBusinessError(ErrorCodeCorporateDocumentIsNotWithinAllowedRange, "corporate document is not within allowed range")
	CorporateDocumentNotFound                                                   = NewBusinessError(ErrorCodeCorporateDocumentNotFound, "corporate document not found")
	CorporateDocumentsAreNotRequired                                            = NewBusinessError(ErrorCodeCorporateDocumentsAreNotRequired, "corporate documents are not required")
	CorporateDocumentsMustBeConfirmed                                           = NewBusinessError(ErrorCodeCorporateDocumentsMustBeConfirmed, "corporate documents must be confirmed")
	CorporateDocumentsVerificationIsNotAllowed                                  = NewBusinessError(ErrorCodeCorporateDocumentsVerificationIsNotAllowed, "corporate documents verification is not allowed")
	CountIsRequired                                                             = NewBusinessError(ErrorCodeCountIsRequired, "count is required")
	CountryAddressIsRequired                                                    = NewBusinessError(ErrorCodeCountryAddressIsRequired, "CountryAddress is required")
	CountryCodeIsNotWithinAllowedRange                                          = NewBusinessError(ErrorCodeCountryCodeIsNotWithinAllowedRange, "country code is not within allowed range")
	CountryCodeIsRequired                                                       = NewBusinessError(ErrorCodeCountryCodeIsRequired, "CountryCode is required")
	CountryCodeIsRestricted                                                     = NewBusinessError(ErrorCodeCountryIsRestricted, "country code is restricted")
	CountryCodesAreRequired                                                     = NewBusinessError(ErrorCodeCountryCodesAreRequired, "CountryCodes are required")
	CountryIsNotInRestrictedList                                                = NewBusinessError(ErrorCodeCountryIsNotInRestrictedList, "country is not in restricted list")
	CountryOfOriginIsRequired                                                   = NewBusinessError(ErrorCodeCountryOfOriginIsRequired, "CountryOfOrigin is required")
	CreatePaymentRecordsFromFileFailed                                          = NewBusinessError(ErrorCodeCreatePaymentRecordsFromFileFailed, "Creating payment file records from file failed")
	CreatedAtIsRequired                                                         = NewBusinessError(ErrorCodeCreatedAtIsRequired, "CreatedAt is required")
	CreditLimitCannotBeNegative                                                 = NewBusinessError(ErrorCodeCreditLimitCannotBeNegative, "credit limit cannot be negative")
	CreditLimitExceedsMaxAmount                                                 = NewBusinessError(ErrorCodeCreditLimitExceedsMaxAmount, "CreditLimit exceeds max amount")
	CreditLimitIsNotAllowed                                                     = NewBusinessError(ErrorCodeCreditLimitIsNotAllowed, "CreditLimit is not allowed")
	CurrencyCodeIsNotWithinAllowedRange                                         = NewBusinessError(ErrorCodeCurrencyCodeIsNotWithinAllowedRange, "CurrencyCode is not within allowed range")
	CurrencyCodeIsRequired                                                      = NewBusinessError(ErrorCodeCurrencyCodeIsRequired, "CurrencyCode is required")
	CurrencyIsRequired                                                          = NewBusinessError(ErrorCodeCurrencyIsRequired, "Currency is required")
	CurrencyProductsNotAllowed                                                  = NewBusinessError(ErrorCodeCurrencyProductsNotAllowed, "currency products not allowed")
	CurrencyProductTemplateNotFound                                             = NewBusinessError(ErrorCodeCurrencyProductTemplateNotFound, "currency product template not found")
	CurrentExpiryDateIsRequired                                                 = NewBusinessError(ErrorCodeCurrentExpiryDateIsRequired, "CurrentExpiryDate is required")
	CurrentPANIsRequired                                                        = NewBusinessError(ErrorCodeCurrentPANIsRequired, "CurrentPAN is required")
	CursorIsRequired                                                            = NewBusinessError(ErrorCodeCursorIsRequired, "Cursor is required")
	CustomerNotFound                                                            = NewBusinessError(ErrorCodeCustomerNotFound, "customer not found")
	CustomerTypeIsRequired                                                      = NewBusinessError(ErrorCodeCustomerTypeIsRequired, "CustomerType is required")
	CustomerTypeNotExist                                                        = NewBusinessError(ErrorCodeCustomerTypeNotExist, "customer type not exist")
	CustomerTypeNotWithinAllowedRange                                           = NewBusinessError(ErrorCodeCustomerTypeNotWithinAllowedRange, "customer type is not within allowed range")
	DailyLimitExceedsMonthlyLimit                                               = NewBusinessError(ErrorCodeDailyLimitExceedsMonthlyLimit, "daily limit exceeds monthly limit")
	DailyLimitExceedsWeeklyLimit                                                = NewBusinessError(ErrorCodeDailyLimitExceedsWeeklyLimit, "daily limit exceeds weekly limit")
	DataEnrichmentRequestHasAlreadyBeenSent                                     = NewBusinessError(ErrorCodeDataEnrichmentRequestHasAlreadyBeenSent, "Data enrichment request has already been sent")
	DataEnrichmentRequestNotFound                                               = NewBusinessError(ErrorCodeDataEnrichmentRequestNotFound, "Data enrichment request not found")
	DataIsNotBase64Encoded                                                      = NewBusinessError(ErrorCodeDataIsNotBase64Encoded, "data is not base64 encoded")
	DataIsRequired                                                              = NewBusinessError(ErrorCodeDataIsRequired, "Data is required")
	DateFieldIsNotWithinAllowedRange                                            = NewBusinessError(ErrorCodeDateFieldIsNotWithinAllowedRange, "DateField is not within allowed range")
	DateIsRequired                                                              = NewBusinessError(ErrorCodeDateIsRequired, "Date is required")
	DecryptionFailed                                                            = NewBusinessError(ErrorCodeDecryptionFailed, "decryption failed")
	DefinedPaymentTemplateIDIsRequired                                          = NewBusinessError(ErrorCodeDefinedPaymentTemplateIDIsRequired, "DefinedPaymentTemplateID is required")
	DefinedPaymentTemplateIDNotInUUID4Format                                    = NewBusinessError(ErrorCodeDefinedPaymentTemplateIDNotInUUID4Format, "DefinedPaymentTemplateID not in UUID4 format")
	DefinedPaymentTemplateIsAlreadyDeleted                                      = NewBusinessError(ErrorCodeDefinedPaymentTemplateIsAlreadyDeleted, "defined payment template is already deleted")
	DefinedPaymentTemplateIsDeleted                                             = NewBusinessError(ErrorCodeDefinedPaymentTemplateIsDeleted, "defined payment template is deleted")
	DefinedPaymentTemplateNotFound                                              = NewBusinessError(ErrorCodeDefinedPaymentTemplateNotFound, "defined payment template not found")
	DeliveryAddressIsMissingOnCard                                              = NewBusinessError(ErrorCodeDeliveryAddressIsMissingOnCard, "delivery address is missing on card")
	DeliveryAddressIsRequired                                                   = NewBusinessError(ErrorCodeDeliveryAddressIsRequired, "delivery address is required")
	DeliveryAddressMustBeMax45CharsInLen                                        = NewBusinessError(ErrorCodeDeliveryAddressMustBeMax45CharsInLen, "delivery address must be maximum of 45 characters in length")
	DeliveryCountryCodeIsNotAllowedForDispatchMethod                            = NewBusinessError(ErrorCodeDeliveryCountryCodeIsNotAllowedForDispatchMethod, "delivery country code is not allowed for dispatch method")
	DeliveryCountryCodeIsNotAllowedForProduct                                   = NewBusinessError(ErrorCodeDeliveryCountryCodeIsNotAllowedForProduct, "delivery country code is not allowed for the product")
	DeliveryTypeIsInvalid                                                       = NewBusinessError(ErrorCodeDeliveryTypeIsInvalid, "Delivery type is invalid")
	DeliveryTypeIsRequired                                                      = NewBusinessError(ErrorCodeDeliveryTypeIsRequired, "Delivery type is required")
	DescriptionIsRequired                                                       = NewBusinessError(ErrorCodeDescriptionIsRequired, "Description is required")
	DescriptionMustBeMax200CharsInLen                                           = NewBusinessError(ErrorCodeDescriptionMustBeMax200CharsInLen, "Description must be maximum of 200 characters in length")
	DescriptionMustBeMax255CharsInLen                                           = NewBusinessError(ErrorCodeDescriptionMustBeMax255CharsInLen, "Description must be maximum of 255 characters in length")
	DescriptionMustBeMax256CharsInLen                                           = NewBusinessError(ErrorCodeDescriptionMustBeMax256CharsInLen, "Description must be maximum of 256 characters in length")
	DeviceAlreadyVerified                                                       = NewBusinessError(ErrorCodeDeviceAlreadyVerified, "device already verified")
	DeviceDoesNotBelongToTheUser                                                = NewBusinessError(ErrorCodeDeviceDoesNotBelongToTheUser, "device does not belong to the user")
	DeviceIDIsRequired                                                          = NewBusinessError(ErrorCodeDeviceIDIsRequired, "DeviceID is required")
	DeviceIDMustBeMaximum256CharsInLength                                       = NewBusinessError(ErrorCodeDeviceIDMustBeMaximum256CharsInLength, "DeviceID must be maximum of 256 characters in length")
	DeviceIDMustBeMaximum4096CharsInLength                                      = NewBusinessError(ErrorCodeDeviceIDMustBeMaximum4096CharsInLength, "DeviceID must be maximum of 4096 characters in length")
	DeviceIndexIsRequired                                                       = NewBusinessError(ErrorCodeDeviceIndexIsRequired, "DeviceIndex is required")
	DeviceNotVerified                                                           = NewBusinessError(ErrorCodeDeviceNotVerified, "device not verified")
	DeviceVerificationSMSRequestsExceeded                                       = NewBusinessError(ErrorCodeDeviceVerificationSMSRequestsExceeded, "device verification SMS requests exceeded")
	DeviceVerificationSMSVerifyAttemptsExceeded                                 = NewBusinessError(ErrorCodeDeviceVerificationSMSVerifyAttemptsExceeded, "device verification SMS verify attempts exceeded")
	DirectoryNotFound                                                           = NewBusinessError(ErrorCodeDirectoryNotFound, "directory not found")
	DispatchMethodIsInvalid                                                     = NewBusinessError(ErrorCodeDispatchMethodIsInvalid, "DispatchMethod is invalid")
	DispatchMethodIsNotAllowedForProduct                                        = NewBusinessError(ErrorCodeDispatchMethodIsNotAllowedForProduct, "dispatch method is not allowed for the product")
	DispatchMethodMustBeMax50CharsInLen                                         = NewBusinessError(ErrorCodeDispatchMethodMustBeMax50CharsInLen, "DispatchMethod must be maximum of 50 characters in length")
	DispatchedAtIsRequired                                                      = NewBusinessError(ErrorCodeDispatchedAtIsRequired, "DispatchedAt is required")
	DisposableCardRequiresCardTypeVirtual                                       = NewBusinessError(ErrorCodeDisposableCardRequiresCardTypeVirtual, "disposable card requires CardTypeVirtual")
	DisposableTypeNotAvailable                                                  = NewBusinessError(ErrorCodeDisposableTypeNotAvailable, "disposable type is not available")
	DocumentNumberMustBeMaximum100CharsInLength                                 = NewBusinessError(ErrorCodeDocumentNumberMustBeMaximum100CharsInLength, "DocumentNumber must be maximum 100 chars in length")
	DocumentTypeIsRequired                                                      = NewBusinessError(ErrorCodeDocumentTypeIsRequired, "DocumentType is required")
	DuplicateCardMerchantRuleValueInArray                                       = NewBusinessError(ErrorCodeDuplicateCardMerchantRuleValueInArray, "duplicate card merchant rule value in array")
	DuplicateRecordFound                                                        = NewBusinessError(ErrorCodeDuplicateRecordFound, "duplicate record found")
	EitherAllowedOrBlockedCardMerchantRulesOfTheSameTypeCanExistOnCard          = NewBusinessError(ErrorCodeEitherAllowedOrBlockedCardMerchantRulesOfTheSameTypeCanExistOnCard, "either allowed or blocked card merchant rules of the same type can exist on card")
	EitherEmailOrMobileIsRequired                                               = NewBusinessError(ErrorCodeEitherEmailOrMobileIsRequired, "either email or mobile is required")
	EmailAlreadyExists                                                          = NewBusinessError(ErrorCodeEmailAlreadyExists, "Email already exists")
	EmailAlreadyVerified                                                        = NewBusinessError(ErrorCodeEmailAlreadyVerified, "Email is already verified")
	EmailCanNotBeChanged                                                        = NewBusinessError(ErrorCodeEmailCanNotBeChanged, "email can not be changed")
	EmailIsNotBlocked                                                           = NewBusinessError(ErrorCodeEmailIsNotBlocked, "Email is not blocked")
	EmailIsRequired                                                             = NewBusinessError(ErrorCodeEmailIsRequired, "email is required")
	EmailMustBeMaximum255CharsInLength                                          = NewBusinessError(ErrorCodeEmailMustBeMaximum255CharsInLength, "Email must be maximum 255 characters in length")
	EmailMustBeVerified                                                         = NewBusinessError(ErrorCodeEmailMustBeVerified, "email must be verified")
	EmailNotInValidFormat                                                       = NewBusinessError(ErrorCodeEmailNotInValidFormat, "Email is not in valid format")
	EmailNotVerified                                                            = NewBusinessError(ErrorCodeEmailNotVerified, "email is not verified")
	EmbossingCompanyNameContainsUnallowedCharacters                             = NewBusinessError(ErrorCodeEmbossingCompanyNameContainsUnallowedCharacters, "EmbossingCompanyName contains unallowed characters")
	EmbossingCompanyNameIsRequired                                              = NewBusinessError(ErrorCodeEmbossingCompanyNameIsRequired, "EmbossingCompanyName is required")
	EmbossingCompanyNameMustBeMaximum21CharsInLength                            = NewBusinessError(ErrorCodeEmbossingCompanyNameMustBeMaximum21CharsInLength, "EmbossingCompanyName must be maximum 21 characters in length")
	EmbossingFirstNameContainsUnallowedCharacters                               = NewBusinessError(ErrorCodeEmbossingFirstNameContainsUnallowedCharacters, "EmbossingFirstName contains unallowed characters")
	EmbossingFirstNameIsRequired                                                = NewBusinessError(ErrorCodeEmbossingFirstNameIsRequired, "EmbossingFirstName is required")
	EmbossingFirstNameMustBeMaximum21CharsInLength                              = NewBusinessError(ErrorCodeEmbossingFirstNameMustBeMaximum21CharsInLength, "EmbossingFirstName must be maximum 21 characters in length")
	EmbossingLastNameContainsUnallowedCharacters                                = NewBusinessError(ErrorCodeEmbossingLastNameContainsUnallowedCharacters, "EmbossingLastName contains unallowed characters")
	EmbossingLastNameIsRequired                                                 = NewBusinessError(ErrorCodeEmbossingLastNameIsRequired, "EmbossingLastName is required")
	EmbossingLastNameMustBeMaximum21CharsInLength                               = NewBusinessError(ErrorCodeEmbossingLastNameMustBeMaximum21CharsInLength, "EmbossingLastName must be maximum 21 characters in length")
	EmbossingNameContainsUnallowedCharacters                                    = NewBusinessError(ErrorCodeEmbossingNameContainsUnallowedCharacters, "EmbossingName contains unallowed characters")
	EmbossingNameIsRequired                                                     = NewBusinessError(ErrorCodeEmbossingNameIsRequired, "EmbossingName is required")
	EmbossingNameMustBeMaximum23CharsInLength                                   = NewBusinessError(ErrorCodeEmbossingNameMustBeMaximum23CharsInLength, "EmbossingName must be maximum 23 characters in length")
	EmbossingNameMustBeMaximum26CharsInLen                                      = NewBusinessError(ErrorCodeEmbossingNameMustBeMaximum26CharsInLen, "EmbossingName must be maximum 26 characters in length")
	EmbossingNameMustBeMinimum2CharsInLen                                       = NewBusinessError(ErrorCodeEmbossingNameMustBeMinimum2CharsInLen, "EmbossingName must be minimum 2 characters in length")
	EmployeeAlreadyDeleted                                                      = NewBusinessError(ErrorCodeEmployeeAlreadyDeleted, "Employee already deleted")
	EmployeeAlreadyExists                                                       = NewBusinessError(ErrorCodeEmployeeAlreadyExists, "Employee already exists")
	EmployeeCardsEnabledRequired                                                = NewBusinessError(ErrorCodeEmployeeCardsEnabledRequired, "Employee cards must be enabled")
	EmployeeIDIsRequired                                                        = NewBusinessError(ErrorCodeEmployeeIDIsRequired, "EmployeeID is required")
	EmployeeIDNotInUUID4Format                                                  = NewBusinessError(ErrorCodeEmployeeIDNotInUUID4Format, "EmployeeID is not in UUID4 format")
	EmployeeInvitationAlreadyUsed                                               = NewBusinessError(ErrorCodeEmployeeInvitationAlreadyUsed, "employee invitation already used")
	EmployeeNotFound                                                            = NewBusinessError(ErrorCodeEmployeeNotFound, "Employee not found")
	EmployeeStatusIsNotWithinAllowedRange                                       = NewBusinessError(ErrorCodeEmployeeStatusIsNotWithinAllowedRange, "Employee status is not within allowed range")
	EmployeeWithSameEmailAlreadyExists                                          = NewBusinessError(ErrorCodeEmployeeWithSameEmailAlreadyExists, "employee with same email already exists")
	EmployeeWithSameMobileAlreadyExists                                         = NewBusinessError(ErrorCodeEmployeeWithSameMobileAlreadyExists, "employee with same mobile already exists")
	EmployeeWithSameNameAlreadyExists                                           = NewBusinessError(ErrorCodeEmployeeWithSameNameAlreadyExists, "employee with same name already exists")
	EmployeesQuantityIsNotWithinAllowedRange                                    = NewBusinessError(ErrorCodeEmployeesQuantityIsNotWithinAllowedRange, "EmployeesQuantity is not within allowed range")
	EmployeesQuantityIsRequired                                                 = NewBusinessError(ErrorCodeEmployeesQuantityIsRequired, "EmployeesQuantity is required")
	EncryptedCVV2NotFound                                                       = NewBusinessError(ErrorCodeEncryptedCVV2NotFound, "encrypted CVV2 not found")
	EncryptedPINIsRequired                                                      = NewBusinessError(ErrorCodeEncryptedPINIsRequired, "encrypted PIN is required")
	EncryptedPINNotFound                                                        = NewBusinessError(ErrorCodeEncryptedPINNotFound, "encrypted PIN not found")
	EncryptedPasswordIsRequired                                                 = NewBusinessError(ErrorCodeEncryptedPasswordIsRequired, "EncryptedPassword is required")
	EncryptedSessionAlreadyCreated                                              = NewBusinessError(ErrorCodeEncryptedSessionAlreadyCreated, "encrypted session already created")
	EndpointURLIsRequired                                                       = NewBusinessError(ErrorCodeEndpointURLIsRequired, "EndpointURL is required")
	EndpointURLMustBeMaximum4096CharsInLength                                   = NewBusinessError(ErrorCodeEndpointURLMustBeMaximum4096CharsInLength, "EndpointURL must be maximum of 4096 characters in length")
	EntityAccessesIsRequired                                                    = NewBusinessError(ErrorCodeEntityAccessesIsRequired, "EntityAccesses is required")
	EntityIDIsRequired                                                          = NewBusinessError(ErrorCodeEntityIDISRequired, "EntityID is required")
	EntityIDNotInUUID4Format                                                    = NewBusinessError(ErrorCodeEntityIDNotInUUID4Format, "EntityID is not in UUID4 format")
	EntityTypeIsRequired                                                        = NewBusinessError(ErrorCodeEntityTypeIsRequired, "EntityType is required")
	EntityTypeNotWithinAllowedRange                                             = NewBusinessError(ErrorCodeEntityTypeNotWithinAllowedRange, "EntityType is not within allowed range")
	EntityWithoutAssociation                                                    = NewBusinessError(ErrorCodeEntityWithoutAssociation, "entity without association")
	ErrorCallbackURLIsRequired                                                  = NewBusinessError(ErrorCodeErrorCallbackURLIsRequired, "ErrorCallbackURL is required")
	ErrorCodeIsRequired                                                         = NewBusinessError(ErrorCodeErrorCodeIsRequired, "ErrorCode is required")
	ErrorMessageIsRequired                                                      = NewBusinessError(ErrorCodeErrorMessageIsRequired, "ErrorMessage is required")
	ErrorMessageMustBeMax255CharsInLen                                          = NewBusinessError(ErrorCodeErrorMessageMustBeMax255CharsInLen, "ErrorMessage must be maximum of 255 characters in length")
	EstonianIndustryTypeIsNotWithinAllowedRange                                 = NewBusinessError(ErrorCodeEstonianIndustryTypeIsNotWithinAllowedRange, "EstonianIndustryType is not within allowed range")
	EventIsNotAllowed                                                           = NewBusinessError(ErrorCodeEventIsNotAllowed, "Event is not allowed")
	EventServiceSettingsNotFound                                                = NewBusinessError(ErrorCodeEventServiceSettingsNotFound, "Event Service settings not found")
	EventSettingsAreNotValid                                                    = NewBusinessError(ErrorCodeEventSettingsAreNotValid, "Event settings are not valid")
	EventSettingsAreRequired                                                    = NewBusinessError(ErrorCodeEventSettingsAreRequired, "Event settings are required")
	ExcludeOnboardingVerificationStatusesIsInvalid                              = NewBusinessError(ErrorCodeExcludeOnboardingVerificationStatusesIsInvalid, "ExcludeOnboardingVerificationStatuses is invalid")
	ExpectedTurnoverIsNotWithinAllowedRange                                     = NewBusinessError(ErrorCodeExpectedTurnoverIsNotWithinAllowedRange, "expected turnover is not within allowed range")
	ExpiryDateFromMustBeLessThanOrEqualToExpiryDateTo                           = NewBusinessError(ErrorCodeExpiryDateFromMustBeLessThanOrEqualToExpiryDateTo, "expiry date from must be less or equal to expary date to")
	ExpiryDateIsRequired                                                        = NewBusinessError(ErrorCodeExpiryDateIsRequired, "expiry date is required")
	ExpiryDaysMustBe1825OrLess                                                  = NewBusinessError(ErrorCodeExpiryDaysMustBe1825OrLess, "ExpiryDays must be 1,825 or less")
	ExpiryDaysMustBePositiveNumber                                              = NewBusinessError(ErrorCodeExpiryDaysMustBePositiveNumber, "ExpiryDays must be positive number")
	ExternalIDAlreadyExists                                                     = NewBusinessError(ErrorCodeExternalIDAlreadyExists, "ExternalID already exists in the product")
	ExternalIDIsRequired                                                        = NewBusinessError(ErrorCodeExternalIDIsRequired, "ExternalID is required")
	ExternalIDMustBeMaximum50CharactersInLength                                 = NewBusinessError(ErrorCodeExternalIDMustBeMaximum50CharactersInLength, "ExternalID must be maximum 50 characters in length")
	ExternalIDsIsRequired                                                       = NewBusinessError(ErrorCodeExternalIDsIsRequired, "external IDs is required")
	ExternalProfileIsRequired                                                   = NewBusinessError(ErrorCodeExternalProfileIsRequired, "ExternalProfile is required")
	ExternalProfileMustHaveLimitedLength                                        = NewBusinessError(ErrorCodeExternalProfileMustHaveLimitedLength, "ExternalProfile must have limited length")
	ExternalRequestorIDMustHaveLimitedLength                                    = NewBusinessError(ErrorCodeExternalRequestorIDMustHaveLimitedLength, "External requestor ID must have limited length")
	ExternalTransactionIDIsRequired                                             = NewBusinessError(ErrorCodeExternalTransactionIDIsRequired, "ExternalTransactionID is required")
	ExternalTransactionIDNotInUUIDFormat                                        = NewBusinessError(ErrorCodeExternalTransactionIDNotInUUIDFormat, "ExternalTransactionID is not in UUID format")
	ExternalVersionIsRequired                                                   = NewBusinessError(ErrorCodeExternalVersionIsRequired, "External version is required")
	ExternalVersionMustHaveLimitedLength                                        = NewBusinessError(ErrorCodeExternalVersionMustHaveLimitedLength, "External version must have limited length")
	FCMTokenAlreadyExists                                                       = NewBusinessError(ErrorCodeFCMTokenAlreadyExists, "FCM Token already exists")
	FCMTokenIsRequired                                                          = NewBusinessError(ErrorCodeFCMTokenIsRequired, "FCMToken is required")
	FCMTokenMustBeMaximum255CharsInLength                                       = NewBusinessError(ErrorCodeFCMTokenMustBeMaximum255CharsInLength, "FCMToken must be maximum of 255 characters in length")
	FCMTokenNotFound                                                            = NewBusinessError(ErrorCodeFCMTokenNotFound, "FCMToken not found")
	FailedEntitiesMustBeFixed                                                   = NewBusinessError(ErrorCodeFailedEntitiesMustBeFixed, "failed entities must be fixed")
	FeeIDIsRequired                                                             = NewBusinessError(ErrorCodeFeeIDIsRequired, "FeeID is required")
	FeeIDNotInUUID4Format                                                       = NewBusinessError(ErrorCodeFeeIDNotInUUID4Format, "FeeID is not in UUID4 format")
	FeeIDsAreRequired                                                           = NewBusinessError(ErrorCodeFeeIDsAreRequired, "FeeIDs are required")
	FeeIsAlreadyResolved                                                        = NewBusinessError(ErrorCodeFeeIsAlreadyResolved, "fee is already resolved")
	FeeNotFound                                                                 = NewBusinessError(ErrorCodeFeeNotFound, "no fee found")
	FeeNotificationsMustBeEnabled                                               = NewBusinessError(ErrorCodeFeeNotificationsMustBeEnabled, "FeeNotifications must be enabled")
	FeeRefundAlreadyExists                                                      = NewBusinessError(ErrorCodeFeeRefundAlreadyExists, "fee refund already exists")
	FeeTypeIsDuplicate                                                          = NewBusinessError(ErrorCodeFeeTypeIsDuplicate, "FeeType is duplicate")
	FeeTypeIsRequired                                                           = NewBusinessError(ErrorCodeFeeTypeIsRequired, "FeeType is required")
	FeeWaiverIDIsNotInUUID4Format                                               = NewBusinessError(ErrorCodeFeeWaiverIDIsNotInUUID4Format, "FeeWaiverID is not in UUID4 format")
	FeeWaiverIDIsRequired                                                       = NewBusinessError(ErrorCodeFeeWaiverIDIsRequired, "FeeWaiverID is required")
	FeeWaiverIsAlreadyDeleted                                                   = NewBusinessError(ErrorCodeFeeWaiverIsAlreadyDeleted, "Fee waiver is already deleted")
	FeeWaiverNotFound                                                           = NewBusinessError(ErrorCodeFeeWaiverNotFound, "Fee waiver not found")
	FeeWaiverTypeIsNotWithinAllowedRange                                        = NewBusinessError(ErrorCodeFeeWaiverTypeIsNotWithinAllowedRange, "FeeWaiverType is not within allowed range")
	FeeWaiverTypeIsRequired                                                     = NewBusinessError(ErrorCodeFeeWaiverTypeIsRequired, "FeeWaiverType is required")
	FeesNotFound                                                                = NewBusinessError(ErrorCodeFeesNotFound, "no fees found")
	FeesStatementAlreadyExists                                                  = NewBusinessError(ErrorCodeFeesStatementAlreadyExists, "fees statement already exists")
	FieldMustBeEmptyForNonRegulatedPartners                                     = NewBusinessError(ErrorCodeFieldMustBeEmptyForNonRegulatedPartners, "field must be empty for non regulated partners")
	FileAlreadyUploaded                                                         = NewBusinessError(ErrorCodeFileAlreadyUploaded, "file already uploaded")
	FileBodyIsRequired                                                          = NewBusinessError(ErrorCodeFileBodyIsRequired, "FileBody is required")
	FileGroupsAreRequired                                                       = NewBusinessError(ErrorCodeFileGroupsAreRequired, "File groups are required")
	FileIDIsRequired                                                            = NewBusinessError(ErrorCodeFileIDIsRequired, "FileID is required")
	FileIDNotInUUID4Format                                                      = NewBusinessError(ErrorCodeFileIDNotInUUID4Format, "FileID is not in UUID4 format")
	FileIDsAreRequired                                                          = NewBusinessError(ErrorCodeFileIDsAreRequired, "FileIDs are required")
	FileNameMustBeMaximum1024CharsInLength                                      = NewBusinessError(ErrorCodeFileNameMustBeMaximum1024CharsInLength, "FileName must be maximum 1024 chars in length")
	FileNotFound                                                                = NewBusinessError(ErrorCodeFileNotFound, "file not found")
	FileSizeExceedsMaximumFileSize                                              = NewBusinessError(ErrorCodeFileSizeExceedsMaximumFileSize, "file size exceeds maximum file size")
	FileTotalAmountExceeded                                                     = NewBusinessError(ErrorCodeFileTotalAmountExceeded, "file total amount is greater than possible")
	FileTypeNotSupported                                                        = NewBusinessError(ErrorCodeFileTypeNotSupported, "FileType not supported")
	FilenameIsRequired                                                          = NewBusinessError(ErrorCodeFilenameIsRequired, "filename is required")
	FilesAreRequired                                                            = NewBusinessError(ErrorCodeFilesAreRequired, "files are required")
	FilterIsRequired                                                            = NewBusinessError(ErrorCodeFilterIsRequired, "filter is required")
	FirstNameContainsUnallowedCharacters                                        = NewBusinessError(ErrorCodeFirstNameContainsUnallowedCharacters, "FirstName contains unallowed characters")
	FirstNameExceedsMaximumLength                                               = NewBusinessError(ErrorCodeFirstNameExceedsMaximumLength, "FirstName exceeds maximum length")
	FirstNameIsRequired                                                         = NewBusinessError(ErrorCodeFirstNameIsRequired, "FirstName is required")
	FirstNameIsRequiredIfLastNameIsPresent                                      = NewBusinessError(ErrorCodeFirstNameIsRequiredIfLastNameIsPresent, "FirstName is required if LastName is present")
	FirstNameMustBeMaximum50CharsInLen                                          = NewBusinessError(ErrorCodeFirstNameMustBeMaximum50CharsInLen, "FirstName must be maximum 50 characters in length")
	FirstNameMustBeMaximum100CharsInLength                                      = NewBusinessError(ErrorCodeFirstNameMustBeMaximum100CharsInLength, "FirstName must be maximum 100 characters in length")
	FirstNameMustBeMinimum1CharInLength                                         = NewBusinessError(ErrorCodeFirstNameMustBeMinimum1CharInLength, "FirstName must be minimum 1 char in length")
	FixedPartCannotBeNegative                                                   = NewBusinessError(ErrorCodeFixedPartCannotBeNegative, "FixedPart cannot be negative")
	FixedPartOverMaxLimit                                                       = NewBusinessError(ErrorCodeFixedPartOverMaxLimit, "FixedPart over max limit")
	ForgotPasswordLinkNotFound                                                  = NewBusinessError(ErrorCodeForgotPasswordLinkNotFound, "no forgot password link found")
	FormatIsRequired                                                            = NewBusinessError(ErrorCodeFormatIsRequired, "Format is required")
	FormatNotWithinAllowedRange                                                 = NewBusinessError(ErrorCodeFormatNotWithinAllowedRange, "Format not within allowed range")
	FoundationAgreementIsRequired                                               = NewBusinessError(ErrorCodeFoundationAgreementIsRequired, "foundation agreement is required")
	FraudCaseDoesNotBelongToTheProduct                                          = NewBusinessError(ErrorCodeFraudCaseDoesNotBelongToTheProduct, "fraud case does not belong to the product")
	FraudCaseIDIsNotInUUID4Format                                               = NewBusinessError(ErrorCodeFraudCaseIDIsNotInUUID4Format, "FraudCaseID is not in UUID4 format")
	FraudCaseIDIsRequired                                                       = NewBusinessError(ErrorCodeFraudCaseIDIsRequired, "FraudCaseID is required")
	FraudCaseNotFound                                                           = NewBusinessError(ErrorCodeFraudCaseNotFound, "fraud case not found")
	FraudMonitoringAdviceResponseIDNotInUUID4Format                             = NewBusinessError(ErrorCodeFraudMonitoringAdviceResponseIDNotInUUID4Format, "FraudMonitoringAdviceResponseID is not in UUID4 format")
	FraudRuleIsNotWithinAllowedRange                                            = NewBusinessError(ErrorCodeFraudRuleIsNotWithinAllowedRange, "FraudRule is not within allowed range")
	FraudTypeIsNotWithinAllowedRange                                            = NewBusinessError(ErrorCodeFraudTypeIsNotWithinAllowedRange, "FraudType is not within allowed range")
	FrictionlessAttemptsExceeded                                                = NewBusinessError(ErrorCodeFrictionlessAttemptsExceeded, "frictionless attempts exceed")
	FromAccountIDCannotBeEqualToAccountID                                       = NewBusinessError(ErrorCodeFromAccountIDCannotBeEqualToAccountID, "FromAccountID cannot be equal to ToAccountID")
	FromAccountIDIsRequired                                                     = NewBusinessError(ErrorCodeFromAccountIDIsRequired, "FromAccountID is required")
	FromAccountIDNotInUUID4Format                                               = NewBusinessError(ErrorCodeFromAccountIDNotInUUID4Format, "FromAccountID is not in UUID4 format")
	FromDateIsRequired                                                          = NewBusinessError(ErrorCodeFromDateIsRequired, "FromDate is required")
	FromDateMustBeLessThanOrEqualToToDate                                       = NewBusinessError(ErrorCodeFromDateMustBeLessThanOrEqualToToDate, "FromDate must be less than or equal to ToDate")
	FromRecordMustBeZeroOrPositiveNumber                                        = NewBusinessError(ErrorCodeFromRecordMustBeZeroOrPositiveNumber, "FromRecord must be zero or a positive integer")
	FullCompanyNameIsRequired                                                   = NewBusinessError(ErrorCodeFullCompanyNameIsRequired, "FullCompanyName is required")
	FullCompanyNameMustBeMaximum100CharactersInLength                           = NewBusinessError(ErrorCodeFullCompanyNameMustBeMaximum100CharactersInLength, "FullCompanyName must be maximum 100 characters in length")
	FullNameIsRequired                                                          = NewBusinessError(ErrorCodeFullNameIsRequired, "Full name is required")
	GAIDMustBeMax1024CharactersInLength                                         = NewBusinessError(ErrorCodeGAIDMustBeMax1024CharactersInLength, "GAID must be max 1024 characters in length")
	GenderCannotBeChanged                                                       = NewBusinessError(ErrorCodeGenderCannotBeChanged, "gender cannot be changed")
	GenderIsNotWithinAllowedRange                                               = NewBusinessError(ErrorCodeGenderIsNotWithinAllowedRange, "Gender is not within allowed range")
	GeneralAndProductIDsAreMutuallyExclusive                                    = NewBusinessError(ErrorCodeGeneralAndProductIDsAreMutuallyExclusive, "General and ProductIDs are mutually exclusive")
	GeneralAndProductTypeAreMutuallyExclusive                                   = NewBusinessError(ErrorCodeGeneralAndProductTypeAreMutuallyExclusive, "General and ProductType are mutually exclusive")
	GroupIsRequired                                                             = NewBusinessError(ErrorCodeGroupIsRequired, "group is required")
	HeaderIsRequired                                                            = NewBusinessError(ErrorCodeHeaderIsRequired, "Header is required")
	HeadquarterAddressIsRequired                                                = NewBusinessError(ErrorCodeHeadquarterAddressIsRequired, "HeadquarterAddress is required")
	HeadquarterAddressMustBeMax100CharactersInLength                            = NewBusinessError(ErrorCodeHeadquarterAddressMustBeMax100CharactersInLength, "HeadquarterAddress must be maximum 100 characters in length")
	HeadquarterCityIsRequired                                                   = NewBusinessError(ErrorCodeHeadquarterCityIsRequired, "HeadquarterCity is required")
	HeadquarterCityMustBeMax100CharactersInLength                               = NewBusinessError(ErrorCodeHeadquarterCityMustBeMax100CharactersInLength, "HeadquarterCity must be maximum 100 characters in length")
	HeadquarterCountryCodeIsNotWithinAllowedRange                               = NewBusinessError(ErrorCodeHeadquarterCountryCodeIsNotWithinAllowedRange, "HeadquarterCountryCode is not within allowed range")
	HeadquarterCountryCodeIsRequired                                            = NewBusinessError(ErrorCodeHeadquarterCountryCodeIsRequired, "HeadquarterCountryCode is required")
	HeadquarterPostalCodeIsRequired                                             = NewBusinessError(ErrorCodeHeadquarterPostalCodeIsRequired, "HeadquarterPostalCode is required")
	HeadquarterPostalCodeMustBeMax30CharactersInLength                          = NewBusinessError(ErrorCodeHeadquarterPostalCodeMustBeMax30CharactersInLength, "HeadquarterPostalCode must be maximum 30 characters in length")
	HexadecimalColorCodeIsNotValid                                              = NewBusinessError(ErrorCodeHexadecimalColorCodeIsNotValid, "hexadecimal color code is not valid")
	IBANMustBeMaximum35CharsInLength                                            = NewBusinessError(ErrorCodeIBANMustBeMaximum35CharsInLength, "IBAN must be maximum of 35 characters in length")
	IDCannotBeEmpty                                                             = NewBusinessError(ErrorCodeIDCannotBeEmpty, "ID cannot be empty")
	IDNotInUUID4Format                                                          = NewBusinessError(ErrorCodeIDNotInUUID4Format, "ID is not in UUID4 format")
	IDsIsRequired                                                               = NewBusinessError(ErrorCodeIDsIsRequired, "IDs is required")
	IPAddressIsRequired                                                         = NewBusinessError(ErrorCodeIPAddressIsRequired, "IP address is required")
	IdentityEntitiesMustBeConfirmed                                             = NewBusinessError(ErrorCodeIdentityEntitiesMustBeConfirmed, "identity entities must be confirmed")
	ImageIDNotInUUID4Format                                                     = NewBusinessError(ErrorCodeImageIDNotInUUID4Format, "Image ID is not in UUID4 format")
	ImageIDOrProductFileTypeIsRequired                                          = NewBusinessError(ErrorCodeImageIDOrProductFileTypeIsRequired, "Image ID or product file type is required")
	ImageIsRequired                                                             = NewBusinessError(ErrorCodeImageIsRequired, "Image is required")
	ImageNotFound                                                               = NewBusinessError(ErrorCodeImageNotFound, "Image not found")
	IncorporationCountryCodeIsNotWithinAllowedRange                             = NewBusinessError(ErrorCodeIncorporationCountryCodeIsNotWithinAllowedRange, "IncorporationCountryCode is not within allowed range")
	IncorporationCountryCodeIsRequired                                          = NewBusinessError(ErrorCodeIncorporationCountryCodeIsRequired, "IncorporationCountryCode is required")
	IncorporationDateIsRequired                                                 = NewBusinessError(ErrorCodeIncorporationDateIsRequired, "IncorporationDate is required")
	IndustryRiskIsInvalid                                                       = NewBusinessError(ErrorCodeIndustryRiskIsInvalid, "IndustryRisk is invalid")
	IndustryTypeIsNotWithinAllowedRange                                         = NewBusinessError(ErrorCodeIndustryTypeIsNotWithinAllowedRange, "IndustryType is not within allowed range")
	IndustryTypeIsRequired                                                      = NewBusinessError(ErrorCodeIndustryTypeIsRequired, "IndustryType is required")
	IndustryTypeMustBeMax100CharactersInLength                                  = NewBusinessError(ErrorCodeIndustryTypeMustBeMax100CharactersInLength, "IndustryType must be maximum 100 characters in length")
	InsufficientFundsForRequestedAmount                                         = NewBusinessError(ErrorCodeInsufficientFundsForRequestedAmount, "insufficient funds for requested amount")
	InsufficientFundsForRequestedAmountIncludingFee                             = NewBusinessError(ErrorCodeInsufficientFundsForRequestedAmountIncludingFee, "insufficient funds for requested amount including fee")
	InternalCustomerIDIsRequired                                                = NewBusinessError(ErrorCodeInternalCustomerIDIsRequired, "InternalCustomerID is required")
	InternalIDIsRequired                                                        = NewBusinessError(ErrorCodeInternalIDIsRequired, "InternalID is required")
	InternalIDNotInUUID4Format                                                  = NewBusinessError(ErrorCodeInternalIDNotInUUID4Format, "InternalID is not in UUID4 format")
	InternetPurchasesCannotBeEnabledWithout3DS                                  = NewBusinessError(ErrorCodeInternetPurchasesCannotBeEnabledWithout3DS, "internet purchases cannot be enabled if 3DS settings are not provided and product has 3DS enabled")
	InvalidAccountAmount                                                        = NewBusinessError(ErrorCodeInvalidAccountAmount, "invalid account amount")
	InvalidAccountStatus                                                        = NewBusinessError(ErrorCodeInvalidAccountStatus, "invalid account status")
	InvalidActionConfirmationActionType                                         = NewBusinessError(ErrorCodeInvalidActionConfirmationActionType, "invalid action confirmation action type")
	InvalidAuthorizationHeader                                                  = NewBusinessError(ErrorCodeInvalidAuthorizationHeader, "invalid Authorization header")
	InvalidCard3DSecureType                                                     = NewBusinessError(ErrorCodeInvalidCard3DSecureType, "invalid card 3d secure type")
	InvalidCardBlockType                                                        = NewBusinessError(ErrorCodeInvalidCardBlockType, "invalid card block type")
	InvalidCardMerchantRuleType                                                 = NewBusinessError(ErrorCodeInvalidCardMerchantRuleType, "invalid card merchant rule type")
	InvalidCardStatus                                                           = NewBusinessError(ErrorCodeInvalidCardStatus, "invalid card status")
	InvalidCardType                                                             = NewBusinessError(ErrorCodeInvalidCardType, "invalid card type")
	InvalidClearingAction                                                       = NewBusinessError(ErrorCodeInvalidClearingAction, "invalid clearing action")
	InvalidClientStatus                                                         = NewBusinessError(ErrorCodeInvalidClientStatus, "invalid client status")
	InvalidClientStatusReason                                                   = NewBusinessError(ErrorCodeInvalidClientStatusReason, "invalid client status reason")
	InvalidCorporateDocumentType                                                = NewBusinessError(ErrorCodeInvalidCorporateDocumentType, "invalid corporate document type")
	InvalidCountryCode                                                          = NewBusinessError(ErrorCodeInvalidCountryCode, "invalid country code")
	InvalidCurrencyCode                                                         = NewBusinessError(ErrorCodeInvalidCurrencyCode, "invalid currency code")
	InvalidDefinedPaymentTemplateType                                           = NewBusinessError(ErrorCodeInvalidDefinedPaymentTemplateType, "invalid defined payment template type")
	InvalidFeeStatus                                                            = NewBusinessError(ErrorCodeInvalidFeeStatus, "invalid fee status")
	InvalidFeeType                                                              = NewBusinessError(ErrorCodeInvalidFeeType, "invalid fee type")
	InvalidForeignExchangeFee                                                   = NewBusinessError(ErrorCodeInvalidForeignExchangeFee, "invalid foreign exchange fee")
	InvalidIPAddress                                                            = NewBusinessError(ErrorCodeInvalidIPAddress, "invalid IP address")
	InvalidImageMimeType                                                        = NewBusinessError(ErrorCodeInvalidImageMimeType, "invalid image mime type")
	InvalidImageResolution                                                      = NewBusinessError(ErrorCodeInvalidImageResolution, "invalid image resolution")
	InvalidImageSize                                                            = NewBusinessError(ErrorCodeInvalidImageSize, "invalid image size")
	InvalidKeyIndex                                                             = NewBusinessError(ErrorCodeInvalidKeyIndex, "invalid key index")
	InvalidLanguageCode                                                         = NewBusinessError(ErrorCodeInvalidLanguageCode, "invalid language code")
	InvalidLimitValue                                                           = NewBusinessError(ErrorCodeInvalidLimitValue, "LimitValue is invalid")
	InvalidMerchantCategoryCode                                                 = NewBusinessError(ErrorCodeInvalidMerchantCategoryCode, "invalid merchant category code")
	InvalidMerchantInterfaceCode                                                = NewBusinessError(ErrorCodeInvalidMerchantInterfaceCode, "invalid merchant interface code")
	InvalidMimeType                                                             = NewBusinessError(ErrorCodeInvalidMimeType, "invalid mime type")
	InvalidPasswordForExistingUser                                              = NewBusinessError(ErrorCodeInvalidPasswordForExistingUser, "invalid password for an existing user")
	InvalidPaymentDocumentMimeType                                              = NewBusinessError(ErrorCodeInvalidPaymentDocumentMimeType, "invalid payment document mime type")
	InvalidPaymentFileRecordStatus                                              = NewBusinessError(ErrorCodeInvalidPaymentFileRecordStatus, "invalid payment file record status")
	InvalidPaymentFileStatus                                                    = NewBusinessError(ErrorCodeInvalidPaymentFileStatus, "invalid payment file status")
	InvalidPaymentStateTransition                                               = NewBusinessError(ErrorCodeInvalidPaymentStateTransition, "invalid payment state transition")
	InvalidProductType                                                          = NewBusinessError(ErrorCodeInvalidProductType, "Invalid product type")
	InvalidProfileType                                                          = NewBusinessError(ErrorCodeInvalidProfileType, "invalid profile type")
	InvalidProfitabilityLevel                                                   = NewBusinessError(ErrorCodeInvalidProfitabilityLevel, "ProfitabilityLevel is invalid")
	InvalidRecipientUsers                                                       = NewBusinessError(ErrorCodeInvalidRecipientUsers, "Invalid recipient users")
	InvalidRegion                                                               = NewBusinessError(ErrorCodeInvalidRegion, "Invalid region")
	InvalidReleaseReason                                                        = NewBusinessError(ErrorCodeInvalidReleaseReason, "invalid release reason")
	InvalidRetryMessageType                                                     = NewBusinessError(ErrorCodeInvalidRetryMessageType, "invalid retry message type")
	InvalidRiskProfile                                                          = NewBusinessError(ErrorCodeInvalidRiskProfile, "RiskProfile is invalid")
	InvalidServiceID                                                            = NewBusinessError(ErrorCodeInvalidServiceID, "invalid service ID")
	InvalidShareholderType                                                      = NewBusinessError(ErrorCodeInvalidShareholderType, "invalid shareholder type")
	InvalidSignature                                                            = NewBusinessError(ErrorCodeInvalidSignature, "invalid signature")
	InvalidTitle                                                                = NewBusinessError(ErrorCodeInvalidTitle, "Title is invalid")
	InvalidToken                                                                = NewBusinessError(ErrorCodeInvalidToken, "invalid token")
	InvalidTransactionAmount                                                    = NewBusinessError(ErrorCodeInvalidTransactionAmount, "invalid transaction amount")
	InvalidTransactionCode                                                      = NewBusinessError(ErrorCodeInvalidTransactionCode, "invalid transaction code")
	InvalidTransactionGroup                                                     = NewBusinessError(ErrorCodeInvalidTransactionGroup, "invalid transaction group")
	InvalidUserIP                                                               = NewBusinessError(ErrorCodeInvalidUserIP, "invalid user IP")
	InvalidUserLoginNameOrPassword                                              = NewBusinessError(ErrorCodeInvalidUserLoginNameOrPassword, "invalid user login name or password")
	InvalidUserMobileOrPIN                                                      = NewBusinessError(ErrorCodeInvalidUserMobileOrPIN, "invalid user mobile or PIN")
	InvoiceEmailIsNotInValidFormat                                              = NewBusinessError(ErrorCodeInvoiceEmailIsNotInValidFormat, "InvoiceEmail is not in valid format")
	InvoiceEmailMustBeMaximum255CharactersInLength                              = NewBusinessError(ErrorCodeInvoiceEmailMustBeMaximum255CharactersInLength, "InvoiceEmail must be maximum 255 characters in length")
	InvoiceObjectTypeUnknown                                                    = NewBusinessError(ErrorCodeInvoiceObjectTypeUnknown, "invoice object type unknown")
	IsAdverseMediaInvolvedFieldMustBeEmptyForNonRegulatedPartners               = NewBusinessError(ErrorCodeIsAdverseMediaInvolvedFieldMustBeEmptyForNonRegulatedPartners, "IsAdverseMediaInvolved field must be empty for non-regulated partners")
	IsAdverseMediaInvolvedIsRequired                                            = NewBusinessError(ErrorCodeIsAdverseMediaInvolvedIsRequired, "IsAdverseMediaInvolved is required")
	IsBankConfirmedRequired                                                     = NewBusinessError(ErrorCodeIsBankConfirmedRequired, "is bank confirmed required")
	IsBoardMemberOrIsShareholderMustBeTrue                                      = NewBusinessError(ErrorCodeIsBoardMemberOrIsShareholderMustBeTrue, "IsBoardMember or IsShareholder must be true")
	IsPoliticallyExposedFieldMustBeEmptyForNonRegulatedPartners                 = NewBusinessError(ErrorCodeIsPoliticallyExposedFieldMustBeEmptyForNonRegulatedPartners, "IsPoliticallyExposed field must be empty for non-regulated partners")
	IsPoliticallyExposedIsRequired                                              = NewBusinessError(ErrorCodeIsPoliticallyExposedIsRequired, "IsPoliticallyExposed is required")
	IsSanctionsRelatedFieldMustBeEmptyForNonRegulatedPartners                   = NewBusinessError(ErrorCodeIsSanctionsRelatedFieldMustBeEmptyForNonRegulatedPartners, "IsSanctionsRelated field must be empty for non-regulated partners")
	IsSanctionsRelatedIsRequired                                                = NewBusinessError(ErrorCodeIsSanctionsRelatedIsRequired, "IsSanctionsRelated is required")
	JWTIssuerIsRequired                                                         = NewBusinessError(ErrorCodeJWTIssuerIsRequired, "JWT issuer is required")
	JWTTokenExpired                                                             = NewBusinessError(ErrorCodeJWTTokenExpired, "JWT token expired")
	JWTTokenIsNotValid                                                          = NewBusinessError(ErrorCodeJWTTokenIsNotValid, "JWT token is not valid")
	KYBIsRequired                                                               = NewBusinessError(ErrorCodeKYBIsRequired, "KYB is required")
	KYBStatusIsInvalid                                                          = NewBusinessError(ErrorCodeKYBStatusIsInvalid, "KYB status is invalid")
	KYBStatusIsRequired                                                         = NewBusinessError(ErrorCodeKYBStatusIsRequired, "KYB status is required")
	KYCCheckCannotBeDeleted                                                     = NewBusinessError(ErrorCodeKYCCheckCannotBeDeleted, "KYC check cannot be deleted")
	KYCCheckCannotBeInitiated                                                   = NewBusinessError(ErrorCodeKYCCheckCannotBeInitiated, "KYC check cannot be initiated")
	KYCCheckIDIsRequired                                                        = NewBusinessError(ErrorCodeKYCCheckIDIsRequired, "KYC check ID is required")
	KYCCheckIDNotInUUID4Format                                                  = NewBusinessError(ErrorCodeKYCCheckIDNotInUUID4Format, "KYC check ID not in UUID4 format")
	KYCCheckIsAlreadyDeleted                                                    = NewBusinessError(ErrorCodeKYCCheckIsAlreadyDeleted, "KYC check is already deleted")
	KYCCheckIsAlreadyInProgress                                                 = NewBusinessError(ErrorCodeKYCCheckIsAlreadyInProgress, "KYC check is already in progress")
	KYCCheckIsDeleted                                                           = NewBusinessError(ErrorCodeKYCCheckIsDeleted, "KYC check is deleted")
	KYCCheckNotFound                                                            = NewBusinessError(ErrorCodeKYCCheckNotFound, "KYC check not found")
	KYCDocumentIDIsRequired                                                     = NewBusinessError(ErrorCodeKYCDocumentIDIsRequired, "KYC document ID is required")
	KYCDocumentIDNotInUUID4Format                                               = NewBusinessError(ErrorCodeKYCDocumentIDNotInUUID4Format, "KYC document ID not in UUID4 format")
	KYCDocumentIssuerIsNotWithinAllowedRange                                    = NewBusinessError(ErrorCodeKYCDocumentIssuerIsNotWithinAllowedRange, "KYC document issuer is not within allowed range")
	KYCDocumentIssuerIsRequired                                                 = NewBusinessError(ErrorCodeKYCDocumentIssuerIsRequired, "KYC document issuer is required")
	KYCDocumentNotFound                                                         = NewBusinessError(ErrorCodeKYCDocumentNotFound, "KYC document not found")
	KYCDocumentNumberIsRequired                                                 = NewBusinessError(ErrorCodeKYCDocumentNumberIsRequired, "KYC document number is required")
	KYCDocumentNumberIsTooLong                                                  = NewBusinessError(ErrorCodeKYCDocumentNumberIsTooLong, "KYC document number is too long")
	KYCDocumentSubtypeIsNotWithinAllowedRange                                   = NewBusinessError(ErrorCodeKYCDocumentSubtypeIsNotWithinAllowedRange, "KYC document subtype is not within allowed range")
	KYCDocumentSubtypeIsRequired                                                = NewBusinessError(ErrorCodeKYCDocumentSubtypeIsRequired, "KYC document subtype is required")
	KYCDocumentTypeIsNotWithinAllowedRange                                      = NewBusinessError(ErrorCodeKYCDocumentTypeIsNotWithinAllowedRange, "KYC document type is not within allowed range")
	KYCDocumentTypeIsRequired                                                   = NewBusinessError(ErrorCodeKYCDocumentTypeIsRequired, "KYC document type is required")
	KYCIsRequired                                                               = NewBusinessError(ErrorCodeKYCIsRequired, "KYC is required")
	KYCStatusIsInvalid                                                          = NewBusinessError(ErrorCodeKYCStatusIsInvalid, "KYC status is invalid")
	KYCStatusIsRequired                                                         = NewBusinessError(ErrorCodeKYCStatusIsRequired, "KYC status is required")
	KYCStatusVerifiedCannotBeChanged                                            = NewBusinessError(ErrorCodeKYCStatusVerifiedCannotBeChanged, "KYC status Verified cannot be changed")
	KYCVerificationIsNotCompleted                                               = NewBusinessError(ErrorCodeKYCVerificationIsNotCompleted, "KYC verification is not completed")
	KeyExceedsMaximumLength                                                     = NewBusinessError(ErrorCodeKeyExceedsMaximumLength, "Key exceeds maximum length")
	KeyIndexIsRequired                                                          = NewBusinessError(ErrorCodeKeyIndexIsRequired, "KeyIndex is required")
	KeyIsDuplicate                                                              = NewBusinessError(ErrorCodeKeyIsDuplicate, "key is duplicate")
	KeyIsRequired                                                               = NewBusinessError(ErrorCodeKeyIsRequired, "Key is required")
	KeyIsTooLong                                                                = NewBusinessError(ErrorCodeKeyIsTooLong, "Key is too long")
	KeyMustContainOnlyAlphaNumericCharacters                                    = NewBusinessError(ErrorCodeKeyMustContainOnlyAlphaNumericCharacters, "Key must contain only alpha numeric characters")
	KeysExceedsMaximumLength                                                    = NewBusinessError(ErrorCodeKeysExceedsMaximumLength, "Keys exceeds maximum length")
	LanguageCodeIsRequired                                                      = NewBusinessError(ErrorCodeLanguageCodeIsRequired, "LanguageCode is required")
	LanguagesIsRequired                                                         = NewBusinessError(ErrorCodeLanguagesIsRequired, "Languages is required")
	LastFourDigitsIsRequired                                                    = NewBusinessError(ErrorCodeLastFourDigitsIsRequired, "last four digits is required")
	LastFourDigitsMustBe4CharsInLength                                          = NewBusinessError(ErrorCodeLastFourDigitsMustBe4CharsInLength, "last four digits must be 4 characters in length")
	LastNameContainsUnallowedCharacters                                         = NewBusinessError(ErrorCodeLastNameContainsUnallowedCharacters, "LastName contains unallowed characters")
	LastNameExceedsMaximumLength                                                = NewBusinessError(ErrorCodeLastNameExceedsMaximumLength, "LastName exceeds maximum length")
	LastNameIsRequired                                                          = NewBusinessError(ErrorCodeLastNameIsRequired, "LastName is required")
	LastNameIsRequiredIfFirstNameIsPresent                                      = NewBusinessError(ErrorCodeLastNameIsRequiredIfFirstNameIsPresent, "LastName is required if FirstName is present")
	LastNameMustBeMaximum50CharsInLen                                           = NewBusinessError(ErrorCodeLastNameMustBeMaximum50CharsInLen, "LastName must be maximum 50 characters in length")
	LastNameMustBeMaximum100CharsInLength                                       = NewBusinessError(ErrorCodeLastNameMustBeMaximum100CharsInLength, "LastName must be maximum 100 characters in length")
	LastNameMustBeMinimum1CharInLength                                          = NewBusinessError(ErrorCodeLastNameMustBeMinimum1CharInLength, "LastName must be minimum 1 char in length")
	LatestFinancialReportIsRequired                                             = NewBusinessError(ErrorCodeLatestFinancialReportIsRequired, "latest financial report is required")
	LiabilityIsNotWithinAllowedRange                                            = NewBusinessError(ErrorCodeLiabilityIsNotWithinAllowedRange, "Liability is not within allowed range")
	LocaleIsRequired                                                            = NewBusinessError(ErrorCodeLocaleIsRequired, "Locale is required")
	LocaleMustBeMaximum5CharsInLength                                           = NewBusinessError(ErrorCodeLocaleMustBeMaximum5CharsInLength, "Locale must be maximum 5 characters in length")
	LoginIsRequired                                                             = NewBusinessError(ErrorCodeLoginIsRequired, "Login is required")
	LoginMustBeMaximum4096CharsInLength                                         = NewBusinessError(ErrorCodeLoginMustBeMaximum4096CharsInLength, "Login must be maximum of 4096 characters in length")
	LoyaltyNumberCannotBeChanged                                                = NewBusinessError(ErrorCodeLoyaltyNumberCannotBeChanged, "loyalty number cannot be changed")
	LoyaltyNumberMustBe20CharsInLength                                          = NewBusinessError(ErrorCodeLoyaltyNumberMustBe20CharsInLength, "LoyaltyNumber must be 20 chars in length")
	LoyaltyNumberMustBeMaximum20CharsInLength                                   = NewBusinessError(ErrorCodeLoyaltyNumberMustBeMaximum20CharsInLength, "LoyaltyNumber must be maximum 20 chars in length")
	MarkedForDisputeByMustBeMaximum50CharsInLength                              = NewBusinessError(ErrorCodeMarkedForDisputeByMustBeMaximum50CharsInLength, "MarkedForDisputeBy must be maximum 50 chars in length")
	MaskedCardNumberIsRequired                                                  = NewBusinessError(ErrorCodeMaskedCardNumberIsRequired, "masked card number is required")
	MaskedCardNumberMustHaveLimitedLength                                       = NewBusinessError(ErrorCodeMaskedCardNumberMustHaveLimitedLength, "masked card number must have limited length")
	MaxCard3DSecureStepUpTriesLimitReached                                      = NewBusinessError(ErrorCodeMaxCard3DSecureStepUpTriesLimitReached, "Maximum card 3D secure step up tries limit reached")
	MerchantCategoryCodeIsNotWithinAllowedRange                                 = NewBusinessError(ErrorCodeCardMerchantCategoryCodeIsNotWithinAllowedRange, "MerchantCategoryCode is not within allowed range")
	MerchantCategoryCodeIsRequired                                              = NewBusinessError(ErrorCodeMerchantCategoryCodeIsRequired, "merchant category code is required")
	MerchantCategoryCodeMustBe4CharsInLength                                    = NewBusinessError(ErrorCodeMerchantCategoryCodeMustBe4CharsInLength, "MerchantCategoryCode must be 4 chars in length")
	MerchantCityIsRequired                                                      = NewBusinessError(ErrorCodeMerchantCityIsRequired, "merchant city is required")
	MerchantCityMustHaveLimitedLength                                           = NewBusinessError(ErrorCodeMerchantCityMustHaveLimitedLength, "MerchantCity must be maximum 20 chars in length")
	MerchantCountryCodeIsNotWithinAllowedRange                                  = NewBusinessError(ErrorCodeMerchantCountryCodeIsNotWithinAllowedRange, "MerchantCountryCode is not within allowed range")
	MerchantCountryCodeIsRequired                                               = NewBusinessError(ErrorCodeMerchantCountryCodeIsRequired, "merchant country code is required")
	MerchantIDIsRequired                                                        = NewBusinessError(ErrorCodeMerchantIDIsRequired, "MerchantID is required")
	MerchantIDMustHaveLimitedLength                                             = NewBusinessError(ErrorCodeMerchantIDMustHaveLimitedLength, "MerchantID must have limited length")
	MerchantInterfaceCodeIsRequired                                             = NewBusinessError(ErrorCodeMerchantInterfaceCodeIsRequired, "MerchantInterfaceCode is required")
	MerchantNameIsRequired                                                      = NewBusinessError(ErrorCodeMerchantNameIsRequired, "merchant name is required")
	MerchantNameMustHaveLimitedLength                                           = NewBusinessError(ErrorCodeMerchantNameMustHaveLimitedLength, "MerchantName must be maximum 40 chars in length")
	MerchantZipCodeIsRequired                                                   = NewBusinessError(ErrorCodeMerchantZipCodeIsRequired, "merchant zip code is required")
	MerchantZipCodeMustHaveLimitedLength                                        = NewBusinessError(ErrorCodeMerchantZipCodeMustHaveLimitedLength, "MerchantZipCode must be maximum 8 chars in length")
	MessageIDIsRequired                                                         = NewBusinessError(ErrorCodeMessageIDIsRequired, "MessageID is required")
	MessageTooLongForRSAKeySize                                                 = NewBusinessError(ErrorCodeMessageTooLongForRSAKeySize, "message too long for RSA public key size")
	MessageTypeIsRequired                                                       = NewBusinessError(ErrorCodeMessageTypeIsRequired, "messageType is required")
	MiddleNameContainsUnallowedCharacters                                       = NewBusinessError(ErrorCodeMiddleNameContainsUnallowedCharacters, "MiddleName contains unallowed characters")
	MiddleNameMustBeMaximum100CharsInLength                                     = NewBusinessError(ErrorCodeMiddleNameMustBeMaximum100CharsInLength, "MiddleName must be maximum 100 characters in length")
	MinAmountCannotBeNegative                                                   = NewBusinessError(ErrorCodeMinAmountCannotBeNegative, "MinAmount cannot be negative")
	MinAmountOverMaxLimit                                                       = NewBusinessError(ErrorCodeMinAmountOverMaxLimit, "MinAmount over max limit")
	MobileAlreadyExists                                                         = NewBusinessError(ErrorCodeMobileAlreadyExists, "Mobile already exists")
	MobileAlreadyVerified                                                       = NewBusinessError(ErrorCodeMobileAlreadyVerified, "Mobile is already verified")
	MobileHasInvalidFormat                                                      = NewBusinessError(ErrorCodeMobileHasInvalidFormat, "Mobile has invalid format")
	MobileIsNotAllowed                                                          = NewBusinessError(ErrorCodeMobileIsNotAllowed, "Mobile is not allowed")
	MobileIsNotBlocked                                                          = NewBusinessError(ErrorCodeMobileIsNotBlocked, "Mobile is not blocked")
	MobileIsRequired                                                            = NewBusinessError(ErrorCodeMobileIsRequired, "Mobile is required")
	MobileMustBeMaximum30CharsInLength                                          = NewBusinessError(ErrorCodeMobileMustBeMaximum30CharsInLength, "Mobile must be maximum 30 characters in length")
	MobileNotVerified                                                           = NewBusinessError(ErrorCodeMobileNotVerified, "mobile is not verified")
	MobileNumberMatchesMultipleEntities                                         = NewBusinessError(ErrorCodeMobileNumberMatchesMultipleEntities, "mobile number matches multiple entities")
	MobileOTPAndEmailOTPChallengesRequired                                      = NewBusinessError(ErrorCodeMobileOTPAndEmailOTPChallengesRequired, "mobile_otp and email_otp challenges is required")
	MobileOTPAttemptsExceeded                                                   = NewBusinessError(ErrorCodeMobileOTPAttemptsExceeded, "mobile OTP attempts exceed")
	MobileOTPChallengeRequired                                                  = NewBusinessError(ErrorCodeMobileOTPChallengeRequired, "mobile_otp challenge is required")
	MobileOTPDoesNotMatch                                                       = NewBusinessError(ErrorCodeMobileOTPDoesNotMatch, "mobile OTP does not match")
	MobileOrEmailIsRequired                                                     = NewBusinessError(ErrorCodeMobileOrEmailIsRequired, "mobile or email is required")
	MobileTransfersAreDisabledForProduct                                        = NewBusinessError(ErrorCodeMobileTransfersAreDisabledForProduct, "mobile transfers are disabled for product")
	MobileVerificationSMSRequestsExceeded                                       = NewBusinessError(ErrorCodeMobileVerificationSMSRequestsExceeded, "mobile verification SMS requests exceeded")
	MobileVerificationSMSVerifyAttemptsExceeded                                 = NewBusinessError(ErrorCodeMobileVerificationSMSVerifyAttemptsExceeded, "mobile verification SMS verify attempts exceeded")
	MonthlyFeeDateAlreadyExists                                                 = NewBusinessError(ErrorCodeMonthlyFeeDateAlreadyExists, "MonthlyFeeDate already exists")
	MonthlyFeeDateIsRequired                                                    = NewBusinessError(ErrorCodeMonthlyFeeDateIsRequired, "MonthlyFeeDate is required")
	MultipleAccountsFound                                                       = NewBusinessError(ErrorCodeMultipleAccountsFound, "Multiple accounts found")
	MultipleAccountsWithSameIBAN                                                = NewBusinessError(ErrorCodeMultipleAccountsWithSameIBAN, "Multiple accounts with same IBAN")
	MultipleCardsFound                                                          = NewBusinessError(ErrorCodeMultipleCardsFound, "Multiple cards found")
	MultipleCurrenciesInReportRows                                              = NewBusinessError(ErrorCodeMultipleCurrenciesInReportRows, "multiple currencies in report rows")
	MultiplePersonsFound                                                        = NewBusinessError(ErrorCodeMultiplePersonsFound, "Multiple persons found")
	NameContainsUnallowedCharacters                                             = NewBusinessError(ErrorCodeNameContainsUnallowedCharacters, "Name contains unallowed characters")
	NameIsRequired                                                              = NewBusinessError(ErrorCodeNameIsRequired, "Name is required")
	NameMustBeMax50CharsInLen                                                   = NewBusinessError(ErrorCodeNameMustBeMax50CharsInLen, "Name must be maximum of 50 characters in length")
	NameMustBeMax100CharsInLen                                                  = NewBusinessError(ErrorCodeNameMustBeMax100CharsInLen, "Name must be maximum of 100 characters in length")
	NegativeBalanceNotAllowed                                                   = NewBusinessError(ErrorCodeNegativeBalanceNotAllowed, "negative balance not allowed")
	NetworkIsRequired                                                           = NewBusinessError(ErrorCodeNetworkIsRequired, "Network is required")
	NetworkMustHaveLimitedLength                                                = NewBusinessError(ErrorCodeNetworkMustHaveLimitedLength, "Network must have limited length")
	NewBillingAddressIsRequired                                                 = NewBusinessError(ErrorCodeNewBillingAddressIsRequired, "NewBillingAddress is required")
	NewExpiryDateIsRequired                                                     = NewBusinessError(ErrorCodeNewExpiryDateIsRequired, "NewExpiryDate is required")
	NewPANIsRequired                                                            = NewBusinessError(ErrorCodeNewPANIsRequired, "NewPAN is required")
	NewPINIsRequired                                                            = NewBusinessError(ErrorCodeNewPINIsRequired, "NewPIN is required")
	NewProductIDIsRequired                                                      = NewBusinessError(ErrorCodeNewProductIDIsRequired, "NewProductID is required")
	NewProductIDNotInUUID4Format                                                = NewBusinessError(ErrorCodeNewProductIDNotInUUID4Format, "NewProductID is not in UUID4 format")
	NoAccountReferenceNumbersLeft                                               = NewBusinessError(ErrorCodeNoAccountReferenceNumbersLeft, "No account reference numbers left")
	NoActiveAccountsFound                                                       = NewBusinessError(ErrorCodeNoActiveAccountsFound, "no active accounts found")
	NoAuthorizationSpecified                                                    = NewBusinessError(ErrorCodeNoAuthorizationSpecified, "no authorization specified")
	NoCardMetadataProfileSpecified                                              = NewBusinessError(ErrorCodeNoCardMetadataProfileSpecified, "no card metadata profile specified")
	NoCardNumbersLeftToGenerate                                                 = NewBusinessError(ErrorCodeNoCardNumbersLeftToGenerate, "no card numbers left to generate new one")
	NoCardsForReplacing                                                         = NewBusinessError(ErrorCodeNoCardsForReplacing, "no cards for replacing")
	NoChallengesAvailable                                                       = NewBusinessError(ErrorCodeNoChallengesAvailable, "no challenges available")
	NoDowngradingToCancelFound                                                  = NewBusinessError(ErrorCodeNoDowngradingToCancelFound, "no downgrading to cancel found")
	NoIPAddressForApplicant                                                     = NewBusinessError(ErrorCodeNoIPAddressForApplicant, "no IP address for applicant")
	NoInactiveCardsFound                                                        = NewBusinessError(ErrorCodeNoInactiveCardsFound, "no inactive cards found")
	NoSettingsFoundForProduct                                                   = NewBusinessError(ErrorCodeNoSettingsFoundForProduct, "no settings found for product")
	NonceIsRequired                                                             = NewBusinessError(ErrorCodeNonceIsRequired, "Nonce is required")
	NonceSignatureIsRequired                                                    = NewBusinessError(ErrorCodeNonceSignatureIsRequired, "NonceSignature is required")
	NotAllAccountsAreActive                                                     = NewBusinessError(ErrorCodeNotAllAccountsAreActive, "not all accounts are active")
	NotAllCorporateDocumentsAreApproved                                         = NewBusinessError(ErrorCodeNotAllCorporateDocumentsAreApproved, "not all corporate documents are approved")
	NotEnoughFundsOnAccount                                                     = NewBusinessError(ErrorCodeNotEnoughFundsOnAccount, "not enough funds on account available amount")
	NotEnoughFundsOnAccountPleaseTopUp                                          = NewBusinessError(ErrorCodeNotEnoughFundsOnAccountPleaseTopUp, "Not enough funds on account. Please top-up")
	NotEnoughFundsOnMainAccount                                                 = NewBusinessError(ErrorCodeNotEnoughFundsOnMainAccount, "not enough funds on main account")
	NotEnoughReferenceNumbers                                                   = NewBusinessError(ErrorCodeNotEnoughReferenceNumbers, "not enough reference numbers on product")
	NotLinkedCardActivationIsForbidden                                          = NewBusinessError(ErrorCodeNotLinkedCardActivationIsForbidden, "card must be linked to an account and account holder before activation")
	NotificationEmailIsRequired                                                 = NewBusinessError(ErrorCodeNotificationEmailIsRequired, "NotificationEmail is required in case of SendNotificationEmail")
	NotificationTypeIsNotWithinAllowedRange                                     = NewBusinessError(ErrorCodeNotificationTypeIsNotWithinAllowedRange, "NotificationType is not within allowed range")
	NotImplemented                                                              = NewBusinessError(ErrorCodeNotImplemented, "not implemented")
	NumberOfCardNumbersReturnedDoNotMatchNumberOfCardIDs                        = NewBusinessError(ErrorCodeNumberOfCardNumbersReturnedDoNotMatchNumberOfCardIDs, "number of card numbers returned do not match number of card IDs")
	NumberOfCardsExceedsLimit                                                   = NewBusinessError(ErrorCodeNumberOfCardsExceedsLimit, "number of cards exceeds limit")
	NumberOfCardsMustBeGreaterThanZero                                          = NewBusinessError(ErrorCodeNumberOfCardsMustBeGreaterThanZero, "number of cards must be greater than 0")
	OTPExpired                                                                  = NewBusinessError(ErrorCodeOTPExpired, "OTP has already expired")
	OTPIsInvalid                                                                = NewBusinessError(ErrorCodeOTPIsInvalid, "OTP is invalid")
	OTPIsRequired                                                               = NewBusinessError(ErrorCodeOTPIsRequired, "OTP is required")
	OTPKeyIsRequired                                                            = NewBusinessError(ErrorCodeOTPKeyIsRequired, "OTP key is required")
	OnboardingVerificationStatusesIsInvalid                                     = NewBusinessError(ErrorCodeOnboardingVerificationStatusesIsInvalid, "OnboardingVerificationStatuses is invalid")
	OneOrMoreCorporateDocumentsAreRequired                                      = NewBusinessError(ErrorCodeOneOrMoreCorporateDocumentsAreRequired, "one or more corporate documents are required")
	OnfidoCheckNotFound                                                         = NewBusinessError(ErrorCodeOnfidoCheckNotFound, "onfido check not found")
	OnfidoChecksNotFound                                                        = NewBusinessError(ErrorCodeOnfidoChecksNotFound, "onfido checks not found")
	OnfidoReportNamesAreEmpty                                                   = NewBusinessError(ErrorCodeOnfidoReportNamesAreEmpty, "product settings OnfidoReportNames are empty")
	OnlyBoardMemberCanBeRepresentative                                          = NewBusinessError(ErrorCodeOnlyBoardMemberCanBeRepresentative, "only board member can be representative")
	OnlyCompletedFeeCanBeRefunded                                               = NewBusinessError(ErrorCodeOnlyCompletedFeeCanBeRefunded, "only completed fee can be refunded")
	OnlyOneAccountAllowedPerCompany                                             = NewBusinessError(ErrorCodeOnlyOneAccountAllowedPerCompany, "only one account allowed per company")
	OnlyOneApplicantIDIsAllowed                                                 = NewBusinessError(ErrorCodeOnlyOneApplicantIDIsAllowed, "only one applicant ID is allowed")
	OnlyOneCombinationIsSupported                                               = NewBusinessError(ErrorCodeOnlyOneCombinationIsSupported, "only one combination is supported")
	OnlyOneEntityIDAllowed                                                      = NewBusinessError(ErrorCodeOnlyOneEntityIDAllowed, "only one entity ID allowed")
	OnlyOneOfRoleIDOrRoleIDsMustBeProvided                                      = NewBusinessError(ErrorCodeOnlyOneOfRoleIDOrRoleIDsMustBeProvided, "only one of RoleID or RoleIDs must be provided")
	OnlyProductIDOrProductTypeAllowed                                           = NewBusinessError(ErrorCodeOnlyProductIDOrProductTypeAllowed, "only ProductID or ProductType allowed")
	OnlyShareholderCanBeAnUltimateBeneficialOwner                               = NewBusinessError(ErrorCodeOnlyShareholderCanBeAnUltimateBeneficialOwner, "Only shareholder can be an ultimate beneficial owner")
	OnlyShareholderCanHavePercentageOwned                                       = NewBusinessError(ErrorCodeOnlyShareholderCanHavePercentageOwned, "only shareholder can have percentage owned")
	OperationAreSuspendedForAFrozenCompany                                      = NewBusinessError(ErrorCodeOperationAreSuspendedForAFrozenCompany, "requested operations are suspended as the company is frozen")
	OperationReasonIsRequired                                                   = NewBusinessError(ErrorCodeOperationReasonIsRequired, "OperationReason is required")
	OppositeCardMerchantRuleWithTheSameTypeAndValueAlreadyExists                = NewBusinessError(ErrorCodeOppositeCardMerchantRuleWithTheSameTypeAndValueAlreadyExists, "opposite card merchant rule with the same type and value already exists")
	OrderCardsRequestsBatchIsEmpty                                              = NewBusinessError(ErrorCodeOrderCardsRequestsBatchIsEmpty, "order cards requests batch is empty")
	OrderDirectionNotWithinAllowedRange                                         = NewBusinessError(ErrorCodeOrderDirectionNotWithinAllowedRange, "OrderDirection is not within allowed range")
	OrderFieldNotWithinAllowedRange                                             = NewBusinessError(ErrorCodeOrderFieldNotWithinAllowedRange, "OrderField is not within allowed range")
	OrderFieldsAreNotWithinAllowedRange                                         = NewBusinessError(ErrorCodeOrderFieldsAreNotWithinAllowedRange, "OrderFields are not within allowed range")
	OrderIDIsRequired                                                           = NewBusinessError(ErrorCodeOrderIDIsRequired, "OrderID is required")
	OrderIDNotInUUID4Format                                                     = NewBusinessError(ErrorCodeOrderIDNotInUUID4Format, "OrderID is not in UUID4 format")
	OrderNotFound                                                               = NewBusinessError(ErrorCodeOrderNotFound, "order not found")
	OriginalFeeIDIsRequired                                                     = NewBusinessError(ErrorCodeOriginalFeeIDIsRequired, "OriginalFeeID is required")
	OriginalFeeIDNotInUUID4Format                                               = NewBusinessError(ErrorCodeOriginalFeeIDNotInUUID4Format, "OriginalFeeID is not in UUID4 format")
	OriginalProductIDIsRequired                                                 = NewBusinessError(ErrorCodeOriginalProductIDIsRequired, "OriginalProductID is required")
	OriginalProductIDNotInUUID4Format                                           = NewBusinessError(ErrorCodeOriginalProductIDNotInUUID4Format, "OriginalProductID is not in UUID4 format")
	OutOfBandFeatureIsDisabled                                                  = NewBusinessError(ErrorCodeOutOfBandFeatureIsDisabled, "Out of Band feature is disabled")
	OutOfBandIDIsRequired                                                       = NewBusinessError(ErrorCodeOutOfBandIDIsRequired, "OutOfBandID is required")
	OutOfBandIDNotInUUID4Format                                                 = NewBusinessError(ErrorCodeOutOfBandIDNotInUUID4Format, "OutOfBandID is not in UUID4 format")
	OverallLimitsCannotBeEnabled                                                = NewBusinessError(ErrorCodeOverallLimitsCannotBeEnabled, "Overall limits cannot be enabled")
	OverallLimitsSettingDisabledForProduct                                      = NewBusinessError(ErrorCodeOverallLimitsSettingDisabledForProduct, "overall limits setting is disabled for given product")
	PANReferenceIDIsRequired                                                    = NewBusinessError(ErrorCodePANReferenceIDIsRequired, "PANReferenceID is required")
	PANReferenceIDOrPANIsRequired                                               = NewBusinessError(ErrorCodePANReferenceIDOrPANIsRequired, "PANReferenceID or PAN is required")
	PGPImplementationNameIsRequired                                             = NewBusinessError(ErrorCodePGPImplementationNameIsRequired, "PGPImplementationName is required")
	PGPImplementationNameNotFound                                               = NewBusinessError(ErrorCodePGPImplementationNameNotFound, "PGPImplementationName not found")
	PINAlreadyExists                                                            = NewBusinessError(ErrorCodePINAlreadyExists, "PIN already exists")
	PINBlockIsRequired                                                          = NewBusinessError(ErrorCodePINBlockIsRequired, "PINBlock is required")
	PINCodeAttemptsExceeded                                                     = NewBusinessError(ErrorCodePINCodeAttemptsExceeded, "PIN code attempts exceed")
	PINCodeCannotBeDecryptedDueToRSA                                            = NewBusinessError(ErrorCodePINCodeCannotBeDecryptedDueToRSA, "PIN code cannot be decrypted due to RSA")
	PINCodeDoesNotMatch                                                         = NewBusinessError(ErrorCodePINCodeDoesNotMatch, "PIN code does not match")
	PINIsInvalid                                                                = NewBusinessError(ErrorCodePINIsInvalid, "PIN is invalid")
	PINIsRequired                                                               = NewBusinessError(ErrorCodePINIsRequired, "PIN is required")
	PINMustBeMaximum4CharsInLength                                              = NewBusinessError(ErrorCodePINMustBeMaximum4CharsInLength, "PIN must be maximum 4 chars in length")
	ParsingXMLFileFailed                                                        = NewBusinessError(ErrorCodeParsingXMLFileFailed, "parsing XML file failed")
	PartnerTypeCannotBeNonRegulated                                             = NewBusinessError(ErrorCodePartnerTypeCannotBeNonRegulated, "PartnerType cannot be NonRegulated")
	PartnerTypeMustBeNonRegulated                                               = NewBusinessError(ErrorCodePartnerTypeMustBeNonRegulated, "PartnerType must be NonRegulated")
	PasswordCannotBeEmpty                                                       = NewBusinessError(ErrorCodePasswordCannotBeEmpty, "password cannot be empty")
	PasswordIsNotAllowedWithSpaces                                              = NewBusinessError(ErrorCodePasswordIsNotAllowedWithSpaces, "password is not allowed with spaces")
	PasswordIsRequired                                                          = NewBusinessError(ErrorCodePasswordIsRequired, "Password is required")
	PasswordMustBeMaximum4096CharsInLength                                      = NewBusinessError(ErrorCodePasswordMustBeMaximum4096CharsInLength, "Password must be maximum of 4096 characters in length")
	PathIsRequired                                                              = NewBusinessError(ErrorCodePathIsRequired, "Path is required")
	PayloadIsRequired                                                           = NewBusinessError(ErrorCodePayloadIsRequired, "payload is required")
	PaymentDetailsIsRequired                                                    = NewBusinessError(ErrorCodePaymentDetailsIsRequired, "PaymentDetails is required")
	PaymentDocumentIDIsRequired                                                 = NewBusinessError(ErrorCodePaymentDocumentIDIsRequired, "PaymentDocumentID is required")
	PaymentDocumentIDNotInUUID4Format                                           = NewBusinessError(ErrorCodePaymentDocumentIDNotInUUID4Format, "PaymentDocumentID is not in UUID4 format")
	PaymentDocumentNotFound                                                     = NewBusinessError(ErrorCodePaymentDocumentNotFound, "payment document not found")
	PaymentDocumentsCountOverMaxLimit                                           = NewBusinessError(ErrorCodePaymentDocumentsCountOverMaxLimit, "Payment documents count over max limit")
	PaymentDocumentsIsRequired                                                  = NewBusinessError(ErrorCodePaymentDocumentsIsRequired, "PaymentDocuments is required")
	PaymentDocumentsNotFound                                                    = NewBusinessError(ErrorCodePaymentDocumentsNotFound, "payment documents not found")
	PaymentFileCannotContainMoreThan1500RecordsAtATime                          = NewBusinessError(ErrorCodePaymentFileCannotContainMoreThan1500RecordsAtATime, "payment file cannot contain more than 1500 records at a time")
	PaymentFileCompleted                                                        = NewBusinessError(ErrorCodePaymentFileCompleted, "payment file completed")
	PaymentFileNotFound                                                         = NewBusinessError(ErrorCodePaymentFileNotFound, "payment file not found")
	PaymentFileRecordNotFound                                                   = NewBusinessError(ErrorCodePaymentFileRecordNotFound, "payment file record not found")
	PaymentIDIsRequired                                                         = NewBusinessError(ErrorCodePaymentIDIsRequired, "PaymentID is required")
	PaymentIDNotInUUID4Format                                                   = NewBusinessError(ErrorCodePaymentIDNotInUUID4Format, "PaymentID is not in UUID4 format")
	PaymentIsRequired                                                           = NewBusinessError(ErrorCodePaymentIsRequired, "Payment is required")
	PaymentMetadataIDIsRequired                                                 = NewBusinessError(ErrorCodePaymentMetadataIDIsRequired, "PaymentMetadataID is required")
	PaymentMetadataIDNotInUUID4Format                                           = NewBusinessError(ErrorCodePaymentMetadataIDNotInUUID4Format, "PaymentMetadataID is not in UUID4 format")
	PaymentMetadataNotFound                                                     = NewBusinessError(ErrorCodePaymentMetadataNotFound, "Payment metadata not found")
	PaymentTypeIsRequired                                                       = NewBusinessError(ErrorCodePaymentTypeIsRequired, "PaymentType is required")
	PaymentTypeNotSupported                                                     = NewBusinessError(ErrorCodePaymentTypeNotSupported, "PaymentType not supported")
	PercentageOwnedIsRequired                                                   = NewBusinessError(ErrorCodePercentageOwnedIsRequired, "PercentageOwned is required")
	PercentageOwnedMustBeBetween1And100                                         = NewBusinessError(ErrorCodePercentageOwnedMustBeBetween1And100, "PercentageOwned must be between 1 and 100")
	PercentagePartCannotBeMoreThan100                                           = NewBusinessError(ErrorCodePercentagePartCannotBeMoreThan100, "PercentagePart cannot be more than 100")
	PercentagePartCannotBeNegative                                              = NewBusinessError(ErrorCodePercentagePartCannotBeNegative, "PercentagePart cannot be negative")
	PermissionNotFound                                                          = NewBusinessError(ErrorCodePermissionNotFound, "Permission not found")
	PermissionTypeNotWithinAllowedRange                                         = NewBusinessError(ErrorCodePermissionTypeNotWithinAllowedRange, "PermissionType is not within allowed range")
	PersonAdditionalInfoIDIsRequired                                            = NewBusinessError(ErrorCodePersonAdditionalInfoIDIsRequired, "PersonAdditionalInfoID is required")
	PersonAdditionalInfoIDNotInUUID4Format                                      = NewBusinessError(ErrorCodePersonAdditionalInfoIDNotInUUID4Format, "PersonAdditionalInfoID is not in UUID4 format")
	PersonAdditionalInfoIsRequired                                              = NewBusinessError(ErrorCodePersonAdditionalInfoIsRequired, "PersonAdditionalInfo is required")
	PersonAdditionalInfoNotFound                                                = NewBusinessError(ErrorCodePersonAdditionalInfoNotFound, "person additional info not found")
	PersonCannotHaveMultiplePendingKYCChecks                                    = NewBusinessError(ErrorCodePersonCannotHaveMultiplePendingKYCChecks, "Person cannot have multiple pending KYC checks")
	PersonHasApprovedKYCCheck                                                   = NewBusinessError(ErrorCodePersonHasApprovedKYCCheck, "Person has Approved KYC check")
	PersonHasOpenedAccounts                                                     = NewBusinessError(ErrorCodePersonHasOpenedAccounts, "person has opened accounts")
	PersonIDIsRequired                                                          = NewBusinessError(ErrorCodePersonIDIsRequired, "PersonID is required")
	PersonIDNotInUUID4Format                                                    = NewBusinessError(ErrorCodePersonIDNotInUUID4Format, "PersonID is not in UUID4 format")
	PersonIDOrCompanyIDIsAllowed                                                = NewBusinessError(ErrorCodePersonIDOrCompanyIDIsAllowed, "PersonID or CompanyID is allowed")
	PersonIDOrCompanyIDIsRequired                                               = NewBusinessError(ErrorCodePersonIDOrCompanyIDIsRequired, "PersonID or CompanyID is required")
	PersonIsAlreadyActive                                                       = NewBusinessError(ErrorCodePersonIsAlreadyActive, "person is already active")
	PersonIsAlredyKYCVerified                                                   = NewBusinessError(ErrorCodePersonIsAlreadyKYCVerified, "person is already KYC verified")
	PersonIsDeactivated                                                         = NewBusinessError(ErrorCodePersonIsDeactivated, "person is deactivated")
	PersonIsDeleted                                                             = NewBusinessError(ErrorCodePersonIsDeleted, "person is deleted")
	PersonIsNotActive                                                           = NewBusinessError(ErrorCodePersonIsNotActive, "person is not active")
	PersonIsNotCompanyEmployee                                                  = NewBusinessError(ErrorCodePersonIsNotCompanyEmployee, "person is not company employee")
	PersonIsRejected                                                            = NewBusinessError(ErrorCodePersonIsRejected, "person is rejected")
	PersonIsTooYoung                                                            = NewBusinessError(ErrorCodePersonIsTooYoung, "person is too young")
	PersonKYCStatusIsNotAllowed                                                 = NewBusinessError(ErrorCodePersonKYCStatusIsNotAllowed, "Person KYC status is not allowed")
	PersonMustBeBeneficialOwner                                                 = NewBusinessError(ErrorCodePersonMustBeBeneficialOwner, "person must be beneficial owner")
	PersonMustHaveKYCStatusVerified                                             = NewBusinessError(ErrorCodePersonMustHaveKYCStatusVerified, "person must have KYC status Verified")
	PersonMustNotBePoliticallyExposed                                           = NewBusinessError(ErrorCodePersonMustNotBePoliticallyExposed, "person must not be politically exposed")
	PersonMustNotBePoliticallyExposedAndResideOutsideEUorEEA                    = NewBusinessError(ErrorCodePersonMustNotBePoliticallyExposedAndResideOutsideEUorEEA, "person must not be politically exposed and reside outside EU or EEA")
	PersonMustNotBeRepresentedBySomeoneElse                                     = NewBusinessError(ErrorCodePersonMustNotBeRepresentedBySomeoneElse, "person must not be represented by someone else")
	PersonNameIsInvalid                                                         = NewBusinessError(ErrorCodePersonNameIsInvalid, "person name is invalid")
	PersonNotFound                                                              = NewBusinessError(ErrorCodePersonNotFound, "no person found")
	PersonalNumberAlreadyExists                                                 = NewBusinessError(ErrorCodePersonalNumberAlreadyExists, "person with specified personal number already exists in the product")
	PersonalNumberCannotBeChanged                                               = NewBusinessError(ErrorCodePersonalNumberCannotBeChanged, "personal number cannot be changed")
	PersonalNumberIsInvalid                                                     = NewBusinessError(ErrorCodePersonalNumberIsInvalid, "personal number is invalid")
	PersonalNumberIsRequired                                                    = NewBusinessError(ErrorCodePersonalNumberIsRequired, "personal number is required")
	PersonalNumberIssuerCannotBeChanged                                         = NewBusinessError(ErrorCodePersonalNumberIssuerCannotBeChanged, "personal number issuer cannot be changed")
	PersonalNumberIssuerIsNotWithinAllowedRange                                 = NewBusinessError(ErrorCodePersonalNumberIssuerIsNotWithinAllowedRange, "PersonalNumberIssuer is not within allowed range")
	PersonalNumberMustBeMax20CharsInLength                                      = NewBusinessError(ErrorCodePersonalNumberMustBeMax20CharsInLength, "personal number must be maximum of 20 characters in length")
	PersonalizationCenterIsRequired                                             = NewBusinessError(ErrorCodePersonalizationCenterIsRequired, "PersonalizationCenter is required")
	PersonalizationCenterNotFound                                               = NewBusinessError(ErrorCodePersonalizationCenterNotFound, "PersonalizationCenter is not found")
	PersonalizationProductCodeCannotHaveMultipleCardDesigns                     = NewBusinessError(ErrorCodePersonalizationProductCodeCannotHaveMultipleCardDesigns, "personalization product code cannot have multiple card designs")
	PersonalizationProductCodeDoesNotBelongToProduct                            = NewBusinessError(ErrorCodePersonalizationProductCodeDoesNotBelongToProduct, "PersonalizationProductCode does not belong to product")
	PersonalizationProductCodeIsNotAllowedForCurrentProduct                     = NewBusinessError(ErrorCodePersonalizationProductCodeIsNotAllowedForCurrentProduct, "PersonalizationProductCode is not allowed for current product")
	PersonalizationProductCodeIsRequired                                        = NewBusinessError(ErrorCodePersonalizationProductCodeIsRequired, "PersonalizationProductCode is required")
	PersonalizationProductCodeMustBe9CharsInLength                              = NewBusinessError(ErrorCodePersonalizationProductCodeMustBe9CharsInLength, "PersonalizationProductCode must be 9 characters in length")
	PersonalizedAtIsRequired                                                    = NewBusinessError(ErrorCodePersonalizedAtIsRequired, "PersonalizedAt is required")
	PersonsEmailDoesNotExist                                                    = NewBusinessError(ErrorCodePersonsEmailDoesNotExist, "Person's email does not exist")
	PhoneHasInvalidFormat                                                       = NewBusinessError(ErrorCodePhoneHasInvalidFormat, "Phone has invalid format")
	PhoneIsRequired                                                             = NewBusinessError(ErrorCodePhoneIsRequired, "Phone is required")
	PhoneMustBeMax20CharsInLen                                                  = NewBusinessError(ErrorCodePhoneMustBeMax20CharsInLen, "Phone must be maximum of 20 characters in length")
	PhysicalCardsQuantityCannotExceedPhysicalCardsMaximumLimit                  = NewBusinessError(ErrorCodePhysicalCardsQuantityCannotExceedPhysicalCardsMaximumLimit, "physical cards quantity cannot exceed physical cards maximum limit")
	PoliticallyExposedPersonExplanationMustBeMaximum255CharsInLength            = NewBusinessError(ErrorCodePoliticallyExposedPersonExplanationMustBeMaximum255CharsInLength, "PoliticallyExposedPersonExplanation must be maximum 255 chars in length")
	PositionIsRequired                                                          = NewBusinessError(ErrorCodePositionIsRequired, "Position is required")
	PositionMustBeMax100CharactersInLength                                      = NewBusinessError(ErrorCodePositionMustBeMax100CharactersInLength, "Position must be maximum 100 characters in length")
	PostalCodeIsRequired                                                        = NewBusinessError(ErrorCodePostalCodeIsRequired, "Postal code is required")
	PostalCodeMustBeMax10CharsInLen                                             = NewBusinessError(ErrorCodePostalCodeMustBeMax10CharsInLen, "Postal code must be maximum of 10 characters in length")
	PredecessorCardNotFound                                                     = NewBusinessError(ErrorCodePredecessorCardNotFound, "no predecessor card found")
	PreferredLanguageCodeIsNotAllowed                                           = NewBusinessError(ErrorCodePreferredLanguageCodeIsNotAllowed, "PreferredLanguageCode is not allowed")
	PrefixExceedsMaximumLength                                                  = NewBusinessError(ErrorCodePrefixExceedsMaximumLength, "Prefix exceeds maximum length")
	PrefixesExceedsMaximumLength                                                = NewBusinessError(ErrorCodePrefixesExceedsMaximumLength, "Prefixes exceeds maximum length")
	PricingPlanAlreadyExistsOnProduct                                           = NewBusinessError(ErrorCodePricingPlanAlreadyExistsOnProduct, "pricing plan already exists on product")
	PricingPlanIsNotEnabled                                                     = NewBusinessError(ErrorCodePricingPlanIsNotEnabled, "pricing plan is not enabled")
	PricingPlanNotFound                                                         = NewBusinessError(ErrorCodePricingPlanNotFound, "pricing plan not found")
	PricingPlanTypeIsNotWithinAllowedRange                                      = NewBusinessError(ErrorCodePricingPlanTypeIsNotWithinAllowedRange, "PricingPlanType is not within allowed range")
	PricingPlanTypeIsRequired                                                   = NewBusinessError(ErrorCodePricingPlanTypeIsRequired, "PricingPlanType is required")
	PricingPlansNotFound                                                        = NewBusinessError(ErrorCodePricingPlansNotFound, "pricing plans not found")
	PrimaryAccountNumberIsRequired                                              = NewBusinessError(ErrorCodePrimaryAccountNumberIsRequired, "Primary account number is required")
	ProcessAlreadyStarted                                                       = NewBusinessError(ErrorCodeProcessAlreadyStarted, "process already started")
	ProcessedAtIsRequired                                                       = NewBusinessError(ErrorCodeProcessedAtIsRequired, "processed at is required")
	ProcessorPINNotFound                                                        = NewBusinessError(ErrorCodeProcessorPINNotFound, "Processor PIN not found")
	ProductCodeAlreadyExists                                                    = NewBusinessError(ErrorCodeProductCodeAlreadyExists, "product code already exists")
	ProductCodeContainsRestrictedCharacters                                     = NewBusinessError(ErrorCodeProductCodeContainsRestrictedCharacters, "product code contains restricted characters: \\/?*[]")
	ProductCodeIsRequired                                                       = NewBusinessError(ErrorCodeProductCodeIsRequired, "product code is required")
	ProductCodesAreRequired                                                     = NewBusinessError(ErrorCodeProductCodesAreRequired, "product codes are required")
	ProductDoesNotBelongToTheClient                                             = NewBusinessError(ErrorCodeProductDoesNotBelongToTheClient, "product does not belong to the client")
	ProductFileTypeIsNotWithinAllowedRange                                      = NewBusinessError(ErrorCodeProductFileTypeIsNotWithinAllowedRange, "product file type is not within allowed range")
	ProductFileTypeIsRequired                                                   = NewBusinessError(ErrorCodeProductFileTypeIsRequired, "product file type is required")
	ProductIDAndProductTypeAreMutuallyExclusive                                 = NewBusinessError(ErrorCodeProductIDAndProductTypeAreMutuallyExclusive, "ProductID and ProductType are mutually exclusive")
	ProductIDIsNotAllowed                                                       = NewBusinessError(ErrorCodeProductIDIsNotAllowed, "ProductID is not allowed")
	ProductIDIsRequired                                                         = NewBusinessError(ErrorCodeProductIDIsRequired, "ProductID is required")
	ProductIDNotInUUID4Format                                                   = NewBusinessError(ErrorCodeProductIDNotInUUID4Format, "ProductID is not in UUID4 format")
	ProductIDsDoNotMatch                                                        = NewBusinessError(ErrorCodeProductIDsDoNotMatch, "product IDs do not match")
	ProductIDsIsRequired                                                        = NewBusinessError(ErrorCodeProductIDsIsRequired, "ProductIDs is required")
	ProductIsAlreadyDeleted                                                     = NewBusinessError(ErrorCodeProductIsAlreadyDeleted, "product is already deleted")
	ProductIsDeleted                                                            = NewBusinessError(ErrorCodeProductIsDeleted, "product is deleted")
	ProductNotFound                                                             = NewBusinessError(ErrorCodeProductNotFound, "product not found")
	ProductSettingsAreNotValid                                                  = NewBusinessError(ErrorCodeProductSettingsAreNotValid, "product settings are not valid")
	ProductSettingsIsRequired                                                   = NewBusinessError(ErrorCodeProductSettingsIsRequired, "product settings is required")
	ProductSettingsNotFound                                                     = NewBusinessError(ErrorCodeProductSettingsNotFound, "product settings not found")
	ProductTypeIsNotAllowed                                                     = NewBusinessError(ErrorCodeProductTypeIsNotAllowed, "ProductType is not allowed")
	ProductTypeIsRequired                                                       = NewBusinessError(ErrorCodeProductTypeIsRequired, "ProductType is required")
	ProfileAlreadyExists                                                        = NewBusinessError(ErrorCodeProfileAlreadyExists, "profile already exists")
	ProfileIDIsRequired                                                         = NewBusinessError(ErrorCodeProfileIDIsRequired, "ProfileID is required")
	ProfileImageIsRequired                                                      = NewBusinessError(ErrorCodeProfileImageIsRequired, "ProfileImage is required")
	ProfileRoleIDNotInUUID4Format                                               = NewBusinessError(ErrorCodeProfileRoleIDNotInUUID4Format, "ProfileRoleID is not in UUID4 format")
	ProfileRoleIDsIsRequired                                                    = NewBusinessError(ErrorCodeProfileRoleIDsIsRequired, "ProfileRoleIDs is required")
	PublicKeyIsNotValid                                                         = NewBusinessError(ErrorCodePublicKeyIsNotValid, "public key is not valid")
	PurchaseDateIsRequired                                                      = NewBusinessError(ErrorCodePurchaseDateIsRequired, "purchase date is required")
	RSAPublicKeyIsNotValid                                                      = NewBusinessError(ErrorCodeRSAPublicKeyIsNotValid, "RSA public key is not valid")
	RSAPublicKeyIsRequired                                                      = NewBusinessError(ErrorCodeRSAPublicKeyIsRequired, "RSAPublicKey is required")
	ReasonIsNotWithinAllowedRange                                               = NewBusinessError(ErrorCodeReasonIsNotWithinAllowedRange, "Reason is not within allowed range")
	ReasonIsRequired                                                            = NewBusinessError(ErrorCodeReasonIsRequired, "Reason is required")
	ReasonMustBeMaximum254CharsInLength                                         = NewBusinessError(ErrorCodeReasonMustBeMaximum254CharsInLength, "Reason must be maximum of 254 characters in length")
	ReceiverIBANIsRequired                                                      = NewBusinessError(ErrorCodeReceiverIBANIsRequired, "ReceiverIBAN is required")
	ReceiverNameIsRequired                                                      = NewBusinessError(ErrorCodeReceiverNameIsRequired, "ReceiverName is required")
	ReceiverNumberConflictWithTemplate                                          = NewBusinessError(ErrorCodeReceiverNumberConflictWithTemplate, "ReceiverNumber in the request conflicts with the template configuration")
	ReceiverNumberIsRequired                                                    = NewBusinessError(ErrorCodeReceiverNumberIsRequired, "ReceiverNumber is required")
	RecipientUserIDsAreRequired                                                 = NewBusinessError(ErrorCodeRecipientUserIDsAreRequired, "RecipientUserIDs are required")
	RecordIDIsNotInUUID4Format                                                  = NewBusinessError(ErrorCodeRecordIDIsNotInUUID4Format, "RecordID is not in UUID4 format")
	RecordStatusIsNotWithinAllowedRange                                         = NewBusinessError(ErrorCodeRecordStatusIsNotWithinAllowedRange, "record status is not within allowed range")
	RecordsCountMustBeMaximum10000                                              = NewBusinessError(ErrorCodeRecordsCountMustBeMaximum10000, "records count must be maximum 10000")
	RecordsCountMustBePositiveNumber                                            = NewBusinessError(ErrorCodeRecordsCountMustBePositiveNumber, "RecordsCount must be a positive integer")
	RedisACLUserDoesNotHaveRequiredPermission                                   = NewBusinessError(ErrorCodeRedisACLUserDoesNotHaveRequiredPermission, "Redis ACL user does not have required permission")
	ReferenceNumberIsInvalid                                                    = NewBusinessError(ErrorCodeReferenceNumberIsInvalid, "reference number is invalid")
	ReferenceNumberIsRequired                                                   = NewBusinessError(ErrorCodeReferenceNumberIsRequired, "reference number is required")
	ReferenceNumbersNotFound                                                    = NewBusinessError(ErrorCodeReferenceNumbersNotFound, "reference numbers not found")
	RefreshTokenIsRequired                                                      = NewBusinessError(ErrorCodeRefreshTokenIsRequired, "RefreshToken is required")
	RefundAmountExceedsFeeAmount                                                = NewBusinessError(ErrorCodeRefundAmountExceedsFeeAmount, "refund amount exceeds fee amount")
	RegistrationAddressIsRequired                                               = NewBusinessError(ErrorCodeRegistrationAddressIsRequired, "RegistrationAddress is required")
	RegistrationAddressMustBeMax100CharactersInLength                           = NewBusinessError(ErrorCodeRegistrationAddressMustBeMax100CharactersInLength, "RegistrationAddress must be maximum 100 characters in length")
	RegistrationCityIsRequired                                                  = NewBusinessError(ErrorCodeRegistrationCityIsRequired, "RegistrationCity is required")
	RegistrationCityMustBeMaximum35CharactersInLength                           = NewBusinessError(ErrorCodeRegistrationCityMustBeMaximum35CharactersInLength, "RegistrationCity must be maximum 35 characters in length")
	RegistrationCityMustBeMaximum100CharactersInLength                          = NewBusinessError(ErrorCodeRegistrationCityMustBeMaximum100CharactersInLength, "RegistrationCity must be maximum 100 characters in length")
	RegistrationCountryCodeIsNotAllowed                                         = NewBusinessError(ErrorCodeRegistrationCountryCodeIsNotAllowed, "RegistrationCountryCode is not allowed")
	RegistrationCountryCodeIsNotWithinAllowedRange                              = NewBusinessError(ErrorCodeRegistrationCountryCodeIsNotWithinAllowedRange, "RegistrationCountryCode is not within allowed range")
	RegistrationCountryCodeIsRequired                                           = NewBusinessError(ErrorCodeRegistrationCountryCodeIsRequired, "RegistrationCountryCode is required")
	RegistrationDateIsRequired                                                  = NewBusinessError(ErrorCodeRegistrationDateIsRequired, "RegistrationDate is required")
	RegistrationFlatIsRequired                                                  = NewBusinessError(ErrorCodeRegistrationFlatIsRequired, "RegistrationFlat is required")
	RegistrationFlatMustBeMaximum50CharactersInLength                           = NewBusinessError(ErrorCodeRegistrationFlatMustBeMaximum50CharactersInLength, "RegistrationFlat must be maximum 50 characters in length")
	RegistrationIncorporationCertificateIsRequired                              = NewBusinessError(ErrorCodeRegistrationIncorporationCertificateIsRequired, "registration incorporation certificate is required")
	RegistrationNumberAlreadyExists                                             = NewBusinessError(ErrorCodeRegistrationNumberAlreadyExists, "RegistrationNumber already exists")
	RegistrationNumberIsRequired                                                = NewBusinessError(ErrorCodeRegistrationNumberIsRequired, "RegistrationNumber is required")
	RegistrationNumberMustBeMaximum20CharactersInLength                         = NewBusinessError(ErrorCodeRegistrationNumberMustBeMaximum20CharactersInLength, "RegistrationNumber must be maximum 20 characters in length")
	RegistrationNumberMustBeMaximum100CharactersInLength                        = NewBusinessError(ErrorCodeRegistrationNumberMustBeMaximum100CharactersInLength, "RegistrationNumber must be maximum 100 characters in length")
	RegistrationPostalCodeIsRequired                                            = NewBusinessError(ErrorCodeRegistrationPostalCodeIsRequired, "RegistrationPostalCode is required")
	RegistrationPostalCodeMustBeMax30CharactersInLength                         = NewBusinessError(ErrorCodeRegistrationPostalCodeMustBeMax30CharactersInLength, "RegistrationPostalCode must be maximum 30 characters in length")
	RegistrationPostalCodeMustBeMaximum10CharactersInLength                     = NewBusinessError(ErrorCodeRegistrationPostalCodeMustBeMaximum10CharactersInLength, "RegistrationPostalCode must be maximum 10 characters in length")
	RegistrationRegionIsRequired                                                = NewBusinessError(ErrorCodeRegistrationRegionIsRequired, "RegistrationRegion is required")
	RegistrationRegionMustBeMaximum255CharactersInLength                        = NewBusinessError(ErrorCodeRegistrationRegionMustBeMaximum255CharactersInLength, "RegistrationRegion must be maximum 255 characters in length")
	RegistrationStreetIsRequired                                                = NewBusinessError(ErrorCodeRegistrationStreetIsRequired, "RegistrationStreet is required")
	RegistrationStreetMustBeMaximum200CharactersInLength                        = NewBusinessError(ErrorCodeRegistrationStreetMustBeMaximum200CharactersInLength, "RegistrationStreet must be maximum 200 characters in length")
	ReleaseCommentMustBeMax255CharsInLength                                     = NewBusinessError(ErrorCodeReleaseCommentMustBeMax255CharsInLength, "ReleaseComment must be max 255 chars in length")
	ReleaseReasonIsRequired                                                     = NewBusinessError(ErrorCodeReleaseReasonIsRequired, "ReleaseReason is required")
	ReleaseReasonNotWithinAllowedRange                                          = NewBusinessError(ErrorCodeReleaseReasonNotWithinAllowedRange, "ReleaseReason not within allowed range")
	RenderTemplateRequestIsRequired                                             = NewBusinessError(ErrorCodeRenderTemplateRequestIsRequired, "RenderTemplateRequest is required")
	ReportColumnNotWithinAllowedRange                                           = NewBusinessError(ErrorCodeReportColumnNotWithinAllowedRange, "ReportColumn is not within allowed range")
	ReportColumnsAreRequired                                                    = NewBusinessError(ErrorCodeReportColumnsAreRequired, "ReportColumns are required")
	ReportFileNameIsRequired                                                    = NewBusinessError(ErrorCodeReportFileNameIsRequired, "Report file name is required")
	ReportFileNameMustHaveLimitedLength                                         = NewBusinessError(ErrorCodeReportFileNameMustHaveLimitedLength, "Report file name must have limited length")
	ReportFormatIsNotWithinAllowedRange                                         = NewBusinessError(ErrorCodeReportFormatIsNotWithinAllowedRange, "ReportFormat is not within allowed range")
	ReportFormatIsRequired                                                      = NewBusinessError(ErrorCodeReportFormatIsRequired, "ReportFormat is required")
	ReportLinkTooLong                                                           = NewBusinessError(ErrorCodeReportLinkTooLong, "report link too long")
	ReportTypeIsNotWithinAllowedRange                                           = NewBusinessError(ErrorCodeReportTypeIsNotWithinAllowedRange, "ReportType is not within allowed range")
	RepresentativeBirthDateIsRequired                                           = NewBusinessError(ErrorCodeRepresentativeBirthDateIsRequired, "RepresentativeBirthDate is required")
	RepresentativeBirthDateMustBeAtLeast16YearsOld                              = NewBusinessError(ErrorCodeRepresentativeBirthDateMustBeAtLeast16YearsOld, "RepresentativeBirthDate must be at least 16 years old")
	RepresentativeFirstNameMustBeMaximum100CharactersInLength                   = NewBusinessError(ErrorCodeRepresentativeFirstNameMustBeMaximum100CharactersInLength, "Representative first name must be maximum of 100 characters in length")
	RepresentativeIDIsRequired                                                  = NewBusinessError(ErrorCodeRepresentativeIDIsRequired, "RepresentativeID is required")
	RepresentativeIDNotInUUID4Format                                            = NewBusinessError(ErrorCodeRepresentativeIDNotInUUID4Format, "RepresentativeID not in UUID4 format")
	RepresentativeIsDeleted                                                     = NewBusinessError(ErrorCodeRepresentativeIsDeleted, "representative is deleted")
	RepresentativeIsRequired                                                    = NewBusinessError(ErrorCodeRepresentativeIsRequired, "Representative is required")
	RepresentativeLastNameMustBeMaximum100CharactersInLength                    = NewBusinessError(ErrorCodeRepresentativeLastNameMustBeMaximum100CharactersInLength, "Representative last name must be maximum of 100 characters in length")
	RepresentativeNameIsRequired                                                = NewBusinessError(ErrorCodeRepresentativeNameIsRequired, "RepresentativeName is required")
	RepresentativeNotFound                                                      = NewBusinessError(ErrorCodeRepresentativeNotFound, "no representative found")
	RepresentativeResidencyIsRequired                                           = NewBusinessError(ErrorCodeRepresentativeResidencyIsRequired, "RepresentativeResidency is required")
	RepresentativesAreRequired                                                  = NewBusinessError(ErrorCodeRepresentativesAreRequired, "Representatives are required")
	RequestIDNotFound                                                           = NewBusinessError(ErrorCodeRequestIDNotFound, "request ID not found")
	RequestedByUserIDNotInUUID4Format                                           = NewBusinessError(ErrorCodeRequestedByUserIDNotInUUID4Format, "RequestedByUserID is not in UUID4 format")
	RequestorChallengeIndicatorMustHaveLimitedLength                            = NewBusinessError(ErrorCodeRequestorChallengeIndicatorMustHaveLimitedLength, "Requestor challenge indicator must have limited length")
	RequiredKYCDocumentsMustBeUploaded                                          = NewBusinessError(ErrorCodeRequiredKYCDocumentsMustBeUploaded, "Required KYC documents must be uploaded")
	ResendIsAvailableAtLeastAfterOneHour                                        = NewBusinessError(ErrorCodeResendIsAvailableAtLeastAfterOneHour, "resend is available at least after one hour")
	ResidenceCountryCodeIsNotAllowed                                            = NewBusinessError(ErrorCodeResidenceCountryCodeIsNotAllowed, "ResidenceCountryCode is not allowed")
	ResidenceCountryCodeIsNotAllowedForShareholderTypeCompany                   = NewBusinessError(ErrorCodeResidenceCountryCodeIsNotAllowedForShareholderTypeCompany, "ResidenceCountryCode is not allowed for shareholder type company")
	ResidenceCountryCodeIsNotWithinAllowedRange                                 = NewBusinessError(ErrorCodeResidenceCountryCodeIsNotWithinAllowedRange, "ResidenceCountryCode is not within allowed range")
	ResidenceCountryCodeIsRequired                                              = NewBusinessError(ErrorCodeResidenceCountryCodeIsRequired, "ResidenceCountryCode is required")
	ResponseCodeIsRequired                                                      = NewBusinessError(ErrorCodeResponseCodeIsRequired, "ResponseCode is required")
	ResponseFileShouldBeProcessedFirst                                          = NewBusinessError(ErrorCodeResponseFileShouldBeProcessedFirst, "response file should be processed first")
	ResultingAmountCannotBeNegative                                             = NewBusinessError(ErrorCodeResultingAmountCannotBeNegative, "resulting amount cannot be negative")
	ResultingBalanceCannotBeMoreThanCreditLimit                                 = NewBusinessError(ErrorCodeResultingBalanceCannotBeMoreThanCreditLimit, "resulting balance cannot be more than credit limit")
	RetentionLetterTypeIsNotWithinAllowedRange                                  = NewBusinessError(ErrorCodeRetentionLetterTypeIsNotWithinAllowedRange, "RetentionLetterType is not within allowed range")
	RetrievalReferenceNumberHasLimitedLength                                    = NewBusinessError(ErrorCodeRetrievalReferenceNumberHasLimitedLength, "RetrievalReferenceNumber must be 12 chars or less")
	RetrievalReferenceNumberIsRequired                                          = NewBusinessError(ErrorCodeRetrievalReferenceNumberIsRequired, "RetrievalReferenceNumber is required")
	ReversedAmountMustBePositiveNumber                                          = NewBusinessError(ErrorCodeReversedAmountMustBePositiveNumber, "ReversedAmount must be a positive number")
	ReversedTransactionAmountMustBePositiveNumber                               = NewBusinessError(ErrorCodeReversedTransactionAmountMustBePositiveNumber, "ReversedTransactionAmount must be a positive number")
	RequestedByUserIDRequired                                                   = NewBusinessError(ErrorCodeRequestedByUserIDRequired, "RequestedByUserID is required")
	RequestIDIsRequired                                                         = NewBusinessError(ErrorCodeRequestIDIsRequired, "RequestID is required")
	RiskLevelIsBlacklisted                                                      = NewBusinessError(ErrorCodeRiskLevelIsBlacklisted, "risk level is blacklisted")
	RiskProfileFieldMustBeEmptyForNonRegulatedPartners                          = NewBusinessError(ErrorCodeRiskProfileFieldMustBeEmptyForNonRegulatedPartners, "RiskProfile field must be empty for non-regulated partners")
	RiskProfileIsRequired                                                       = NewBusinessError(ErrorCodeRiskProfileIsRequired, "RiskProfile is required")
	RiskScoreShouldBeFrom0To100                                                 = NewBusinessError(ErrorCodeRiskScoreShouldBeFrom0To100, "RiskScore should be from 0 to 100")
	RiskStatusIsNotWithinAllowedRange                                           = NewBusinessError(ErrorCodeRiskStatusIsNotWithinAllowedRange, "RiskStatus is not within allowed range")
	RiskZoneIsNotWithinAllowedRange                                             = NewBusinessError(ErrorCodeRiskZoneIsNotWithinAllowedRange, "RiskZone is not within allowed range")
	RoleAlreadyExists                                                           = NewBusinessError(ErrorCodeRoleAlreadyExists, "Role already exists")
	RoleIDIsRequired                                                            = NewBusinessError(ErrorCodeRoleIDIsRequired, "RoleID is required")
	RoleIDNotInUUID4Format                                                      = NewBusinessError(ErrorCodeRoleIDNotInUUID4Format, "RoleID not in UUID4 format")
	RoleIsAlreadyDeleted                                                        = NewBusinessError(ErrorCodeRoleIsAlreadyDeleted, "role is already deleted")
	RoleIsDeleted                                                               = NewBusinessError(ErrorCodeRoleIsDeleted, "role is deleted")
	RoleIsInvalid                                                               = NewBusinessError(ErrorCodeRoleIsInvalid, "Role is invalid")
	RoleIsRequired                                                              = NewBusinessError(ErrorCodeRoleIsRequired, "Role is required")
	RoleNameAlreadyExists                                                       = NewBusinessError(ErrorCodeRoleNameAlreadyExists, "Role name already exists")
	RoleNotFound                                                                = NewBusinessError(ErrorCodeRoleNotFound, "role not found")
	RoleProductTypeNotWithinAllowedRange                                        = NewBusinessError(ErrorCodeRoleProductTypeNotWithinAllowedRange, "RoleProductType is not within allowed range")
	RoleProviderIDIsRequired                                                    = NewBusinessError(ErrorCodeRoleProviderIDIsRequired, "RoleProviderID is required")
	RoleProviderIDNotInUUID4Format                                              = NewBusinessError(ErrorCodeRoleProviderIDNotInUUID4Format, "RoleProviderID is not in UUID4 format")
	RoleTypeNotWithinAllowedRange                                               = NewBusinessError(ErrorCodeRoleTypeNotWithinAllowedRange, "RoleType is not within allowed range")
	RuleIDIsRequired                                                            = NewBusinessError(ErrorCodeBlacklistRuleIDIsRequired, "RuleID is required")
	RuleIDNotInUUID4Format                                                      = NewBusinessError(ErrorCodeBlacklistRuleIDNotInUUID4Format, "RuleID not in UUID4 format")
	S3BucketIsRequired                                                          = NewBusinessError(ErrorCodeS3BucketIsRequired, "S3Bucket is required")
	S3KeyIsRequired                                                             = NewBusinessError(ErrorCodeS3KeyIsRequired, "S3Key is required")
	SEPATransferInitiationIsDisabled                                            = NewBusinessError(ErrorCodeSEPATransferInitiationIsDisabled, "SEPA transfer initiation is disabled")
	SHACardNumberMustBe64CharactersInLength                                     = NewBusinessError(ErrorCodeSHACardNumberMustBe64CharactersInLength, "SHACardNumber must be 64 characters in length")
	SHACardNumbersIsRequired                                                    = NewBusinessError(ErrorCodeSHACardNumbersIsRequired, "SHACardNumbers is required")
	SQSQueueNameIsRequired                                                      = NewBusinessError(ErrorCodeSQSQueueNameIsRequired, "sqsQueueName is required")
	SSOApplicationIDNotFound                                                    = NewBusinessError(ErrorCodeSSOApplicationIDNotFound, "no SSO application ID found")
	SalaryProductSettingIsNotSet                                                = NewBusinessError(ErrorCodeSalaryProductSettingIsNotSet, "SalaryProduct setting is not set")
	SaltedgeAccountNotFound                                                     = NewBusinessError(ErrorCodeSaltedgeAccountNotFound, "saltedge account not found")
	SaltedgeAispConsentAlreadyRevoked                                           = NewBusinessError(ErrorCodeSaltedgeAispConsentAlreadyRevoked, "AISP consent already revoked")
	SaltedgeAispConsentExpired                                                  = NewBusinessError(ErrorCodeSaltedgeAispConsentExpired, "AISP consent expired")
	SaltedgeAispConsentNotFound                                                 = NewBusinessError(ErrorCodeSaltedgeAispConsentNotFound, "AISP consent not found")
	SaltedgeAispConsentRevoked                                                  = NewBusinessError(ErrorCodeSaltedgeAispConsentRevoked, "AISP consent revoked")
	SaltedgeAispConsentScopesInvalid                                            = NewBusinessError(ErrorCodeSaltedgeAispConsentScopesInvalid, "AISP consent scopes invalid")
	SaltedgeAispConsentScopesNotAllowed                                         = NewBusinessError(ErrorCodeSaltedgeAispConsentScopesNotAllowed, "AISP consent scopes not allowed")
	SaltedgeAllAccountsExcluded                                                 = NewBusinessError(ErrorCodeSaltedgeAllAccountsExcluded, "saltedge all accounts excluded")
	SaltedgeAttemptNotFound                                                     = NewBusinessError(ErrorCodeSaltedgeAttemptNotFound, "saltedge attempt not found")
	SaltedgeBackgroundFetchLimitExceeded                                        = NewBusinessError(ErrorCodeSaltedgeBackgroundFetchLimitExceeded, "saltedge background fetch limit exceeded")
	SaltedgeBadRequest                                                          = NewBusinessError(ErrorCodeSaltedgeBadRequest, "format of the create request of the financial insight report is not valid")
	SaltedgeBatchSizeLimitExceeded                                              = NewBusinessError(ErrorCodeSaltedgeBatchSizeLimitExceeded, "more than 100 objects were sent in request")
	SaltedgeCategorizationLimitReached                                          = NewBusinessError(ErrorCodeSaltedgeCategorizationLimitReached, "categorization limit reached")
	SaltedgeConnectionAlreadyAuthorized                                         = NewBusinessError(ErrorCodeSaltedgeConnectionAlreadyAuthorized, "connection has been already authorized")
	SaltedgeConnectionAlreadyProcessing                                         = NewBusinessError(ErrorCodeSaltedgeConnectionAlreadyProcessing, "connection is already being processed")
	SaltedgeConnectionCannotBeRefreshed                                         = NewBusinessError(ErrorCodeSaltedgeConnectionCannotBeRefreshed, "connection cannot be refreshed")
	SaltedgeConnectionDisabled                                                  = NewBusinessError(ErrorCodeSaltedgeConnectionDisabled, "connection disabled")
	SaltedgeConnectionDuplicated                                                = NewBusinessError(ErrorCodeSaltedgeConnectionDuplicated, "connection duplicated")
	SaltedgeConnectionFetchingStopped                                           = NewBusinessError(ErrorCodeSaltedgeConnectionFetchingStopped, "connection fetching had stopped because of fetching timeout or connection has been deleted during the fetching process")
	SaltedgeConnectionLimitReached                                              = NewBusinessError(ErrorCodeSaltedgeConnectionLimitReached, "connection limit reached")
	SaltedgeConnectionNotFound                                                  = NewBusinessError(ErrorCodeSaltedgeConnectionNotFound, "saltedge connection not found")
	SaltedgeCountryNotFound                                                     = NewBusinessError(ErrorCodeSaltedgeCountryNotFound, "saltedge country code not found")
	SaltedgeCredentialsNotMatch                                                 = NewBusinessError(ErrorCodeSaltedgeCredentialsNotMatch, "new connection credentials do not match the old ones on reconnect")
	SaltedgeCustomFieldsFormatInvalid                                           = NewBusinessError(ErrorCodeSaltedgeCustomFieldsFormatInvalid, "custom fields format is invalid")
	SaltedgeCustomFieldsSizeTooBig                                              = NewBusinessError(ErrorCodeSaltedgeCustomFieldsSizeTooBig, "custom fields object has more than 1 KB")
	SaltedgeCustomerLocked                                                      = NewBusinessError(ErrorCodeSaltedgeCustomerLocked, "saltedge customer is locked")
	SaltedgeDateFormatInvalid                                                   = NewBusinessError(ErrorCodeSaltedgeDateFormatInvalid, "saltedge date format invalid")
	SaltedgeDateOutOfAispConsentRange                                           = NewBusinessError(ErrorCodeSaltedgeDateOutOfAispConsentRange, "saltedge date out of AISP consent range")
	SaltedgeDateOutOfRange                                                      = NewBusinessError(ErrorCodeSaltedgeDateOutOfRange, "saltedge date out of range")
	SaltedgeDateTimeFormatInvalid                                               = NewBusinessError(ErrorCodeSaltedgeDateTimeFormatInvalid, "saltedge datetime format invalid")
	SaltedgeDateTimeOutOfRange                                                  = NewBusinessError(ErrorCodeSaltedgeDateTimeOutOfRange, "saltedge datetime out of range")
	SaltedgeEmailInvalid                                                        = NewBusinessError(ErrorCodeSaltedgeEmailInvalid, "saltedge email is invalid")
	SaltedgeFetchScopesInvalid                                                  = NewBusinessError(ErrorCodeSaltedgeFetchScopesInvalid, "saltedge fetch scopes is invalid")
	SaltedgeFetchScopesNotAllowed                                               = NewBusinessError(ErrorCodeSaltedgeFetchScopesNotAllowed, "saltedge fetch scopes not allowed")
	SaltedgeFileError                                                           = NewBusinessError(ErrorCodeSaltedgeFileError, "saltedge file error")
	SaltedgeFileNotProvided                                                     = NewBusinessError(ErrorCodeSaltedgeFileNotProvided, "saltedge file not provided")
	SaltedgeFileNotSaved                                                        = NewBusinessError(ErrorCodeSaltedgeFileNotSaved, "saltedge file not saved")
	SaltedgeHolderInfoNotSupported                                              = NewBusinessError(ErrorCodeSaltedgeHolderInfoNotSupported, "saltedge holder info is not supported")
	SaltedgeIdentifierInvalid                                                   = NewBusinessError(ErrorCodeSaltedgeIdentifierInvalid, "saltedge identifier is invalid")
	SaltedgeInteractiveTimeout                                                  = NewBusinessError(ErrorCodeSaltedgeInteractiveTimeout, "it took too long to respond to the interactive question")
	SaltedgeInvalidAispConsentFromDate                                          = NewBusinessError(ErrorCodeSaltedgeInvalidAispConsentFromDate, "invalid AISP consent from date")
	SaltedgeInvalidAispConsentPeriod                                            = NewBusinessError(ErrorCodeSaltedgeInvalidAispConsentPeriod, "invalid AISP consent period")
	SaltedgeInvalidFromDate                                                     = NewBusinessError(ErrorCodeSaltedgeInvalidFromDate, "saltedge invalid from date")
	SaltedgeInvalidToDate                                                       = NewBusinessError(ErrorCodeSaltedgeInvalidToDate, "saltedge invalid to date")
	SaltedgeInvalidURI                                                          = NewBusinessError(ErrorCodeSaltedgeInvalidURI, "saltedge invalid URI")
	SaltedgeJSONParseError                                                      = NewBusinessError(ErrorCodeSaltedgeJSONParseError, "saltedge json parse error")
	SaltedgePartnerConsentAlreadyRevoked                                        = NewBusinessError(ErrorCodeSaltedgePartnerConsentAlreadyRevoked, "consent already revoked")
	SaltedgePartnerConsentNotFound                                              = NewBusinessError(ErrorCodeSaltedgePartnerConsentNotFound, "partner consent not found")
	SaltedgePartnerConsentRevoked                                               = NewBusinessError(ErrorCodeSaltedgePartnerConsentRevoked, "partner consent revoked")
	SaltedgeProviderDisabled                                                    = NewBusinessError(ErrorCodeSaltedgeProviderDisabled, "provider disabled")
	SaltedgeProviderInactive                                                    = NewBusinessError(ErrorCodeSaltedgeProviderInactive, "provider inactive")
	SaltedgeProviderNotFound                                                    = NewBusinessError(ErrorCodeSaltedgeProviderNotFound, "provider not found")
	SaltedgeProviderNotInteractive                                              = NewBusinessError(ErrorCodeSaltedgeProviderNotInteractive, "provider not interactive")
	SaltedgeRateLimitExceeded                                                   = NewBusinessError(ErrorCodeSaltedgeRateLimitExceeded, "rate limit exceeded")
	SaltedgeReportNotFound                                                      = NewBusinessError(ErrorCodeSaltedgeReportNotFound, "report not found")
	SaltedgeRequestExpired                                                      = NewBusinessError(ErrorCodeSaltedgeRequestExpired, "request is expired")
	SaltedgeReturnURLInvalid                                                    = NewBusinessError(ErrorCodeSaltedgeReturnURLInvalid, "return URL is invalid")
	SaltedgeReturnURLTooLong                                                    = NewBusinessError(ErrorCodeSaltedgeReturnURLTooLong, "return URL too long")
	SaltedgeRouteNotFound                                                       = NewBusinessError(ErrorCodeSaltedgeRouteNotFound, "saltedge route not found")
	SaltedgeTransactionNotFound                                                 = NewBusinessError(ErrorCodeSaltedgeTransactionNotFound, "saltedge transaction not found")
	SaltedgeValueOutOfRange                                                     = NewBusinessError(ErrorCodeSaltedgeValueOutOfRange, "saltedge value out of range")
	SaltedgeWrongProviderMode                                                   = NewBusinessError(ErrorCodeSaltedgeWrongProviderMode, "saltedge wrong provider mode")
	SaltedgeWrongRequestFormat                                                  = NewBusinessError(ErrorCodeSaltedgeWrongRequestFormat, "saltedge wrong request format")
	SameManualClearingActionIsAlreadySetOnTheTransaction                        = NewBusinessError(ErrorCodeSameManualClearingActionIsAlreadySetOnTheTransaction, "same manual clearing action is already set on the transaction")
	ScopesIsRequired                                                            = NewBusinessError(ErrorCodeScopesIsRequired, "Scopes is required")
	SearchReturnedNoResults                                                     = NewBusinessError(ErrorCodeSearchReturnedNoResults, "search returned no results")
	SearchValueIsRequired                                                       = NewBusinessError(ErrorCodeSearchValueIsRequired, "search value is required")
	SecretTokenIsInvalid                                                        = NewBusinessError(ErrorCodeSecretTokenIsInvalid, "secret token is invalid")
	SecuredCardDataNotFound                                                     = NewBusinessError(ErrorCodeSecuredCardDataNotFound, "secured card data not found")
	SelfCreatedCurrencyProductAlreadyExistsForCurrency                          = NewBusinessError(ErrorCodeSelfCreatedCurrencyProductAlreadyExistsForCurrency, "self created currency product already exists for currency")
	SendCardLifecycleEventsMustBeEnabled                                        = NewBusinessError(ErrorCodeSendCardLifecycleEventsMustBeEnabled, "SendCardLifecycleEvents must be enabled")
	SenderNameIsRequired                                                        = NewBusinessError(ErrorCodeSenderNameIsRequired, "SenderName is required")
	SenderNameMustBeMax255CharsInLength                                         = NewBusinessError(ErrorCodeSenderNameMustBeMax255CharsInLength, "SenderName must be maximum 255 characters in length")
	SeparatedEmbossingNameIsRequired                                            = NewBusinessError(ErrorCodeSeparatedEmbossingNameIsRequired, "SeparatedEmbossingName is required")
	ServiceIDsAreRequired                                                       = NewBusinessError(ErrorCodeServiceIDsAreRequired, "ServiceIDs are required")
	ServiceIDsCannotHaveDuplicateServiceID                                      = NewBusinessError(ErrorCodeServiceIDsCannotHaveDuplicateServiceID, "ServiceIDs cannot have duplicate service ID")
	SessionAlreadyCreated                                                       = NewBusinessError(ErrorCodeSessionAlreadyCreated, "session already created")
	SessionExpired                                                              = NewBusinessError(ErrorCodeSessionExpired, "session expired")
	SessionIDIsRequired                                                         = NewBusinessError(ErrorCodeSessionIDIsRequired, "session ID is required")
	SessionIDNotInUUID4Format                                                   = NewBusinessError(ErrorCodeSessionIDNotInUUID4Format, "session ID is not in UUID4 format")
	SettlementCurrencyCodeCannotBeUsedForProductReport                          = NewBusinessError(ErrorCodeSettlementCurrencyCodeCannotBeUsedForProductReport, "settlement currency code cannot be used for product report")
	SettlementCurrencyCodeIsNotAllowed                                          = NewBusinessError(ErrorCodeSettlementCurrencyCodeIsNotAllowed, "SettlementCurrencyCode is not allowed")
	SettlementCurrencyCodeIsRequired                                            = NewBusinessError(ErrorCodeSettlementCurrencyCodeIsRequired, "SettlementCurrencyCode is required")
	SettlementEmailIsNotInValidFormat                                           = NewBusinessError(ErrorCodeSettlementEmailIsNotInValidFormat, "SettlementEmail is not in valid format")
	SettlementEmailMustBeMaximum255CharactersInLength                           = NewBusinessError(ErrorCodeSettlementEmailMustBeMaximum255CharactersInLength, "SettlementEmail must be maximum 255 characters in length")
	SettlementPaymentDetailsIsRequired                                          = NewBusinessError(ErrorCodeSettlementPaymentDetailsIsRequired, "settlement payment details is required")
	SettlementRiskLimitAlreadyExists                                            = NewBusinessError(ErrorCodeSettlementRiskLimitAlreadyExists, "settlement risk limit already exists")
	SettlementRiskLimitCannotBeMoreThanMaxLimit                                 = NewBusinessError(ErrorCodeSettlementRiskLimitCannotBeMoreThanMaxLimit, "settlement risk limit cannot be more than max limit")
	SettlementRiskLimitExceedsDatabaseLimit                                     = NewBusinessError(ErrorCodeSettlementRiskLimitExceedsDatabaseLimit, "settlement risk limit exceeds database limit")
	SettlementRiskLimitIDIsNotInUUID4Format                                     = NewBusinessError(ErrorCodeSettlementRiskLimitIDIsNotInUUID4Format, "settlement risk limit ID is not in UUID4 format")
	SettlementRiskLimitIDIsRequired                                             = NewBusinessError(ErrorCodeSettlementRiskLimitIDIsRequired, "settlement risk limit ID is required")
	SettlementRiskLimitNotFound                                                 = NewBusinessError(ErrorCodeSettlementRiskLimitNotFound, "no settlement risk limit found")
	SharedKeyIsNotValid                                                         = NewBusinessError(ErrorCodeSharedKeyIsNotValid, "SharedKey is not valid")
	SharedKeyIsRequired                                                         = NewBusinessError(ErrorCodeSharedKeyIsRequired, "SharedKey is required")
	ShareholderIDIsRequired                                                     = NewBusinessError(ErrorCodeShareholderIDIsRequired, "ShareholderID is required")
	ShareholderIDNotInUUID4Format                                               = NewBusinessError(ErrorCodeShareholderIDNotInUUID4Format, "ShareholderID not in UUID4 format")
	ShareholderIsDeleted                                                        = NewBusinessError(ErrorCodeShareholderIsDeleted, "shareholder is deleted")
	ShareholderNotFound                                                         = NewBusinessError(ErrorCodeShareholderNotFound, "shareholder not found")
	ShareholdersVerificationIsNotAllowed                                        = NewBusinessError(ErrorCodeShareholdersVerificationIsNotAllowed, "shareholders verification is not allowed")
	SignatureIsRequired                                                         = NewBusinessError(ErrorCodeSignatureIsRequired, "Signature is required")
	SignedAtIsRequired                                                          = NewBusinessError(ErrorCodeSignedAtIsRequired, "SignedAt is required")
	SomethingWentWrong                                                          = NewBusinessError(ErrorCodeSomethingWentWrong, "something went wrong")
	SourceDeviceTypeIsNotWithinAllowedRange                                     = NewBusinessError(ErrorCodeSourceDeviceTypeIsNotWithinAllowedRange, "source device type is not within allowed range")
	SourceIsNotWithinAllowedRange                                               = NewBusinessError(ErrorCodeSourceIsNotWithinAllowedRange, "Source is not within allowed range")
	SourceOriginIsNotWithinAllowedRange                                         = NewBusinessError(ErrorCodeSourceOriginIsNotWithinAllowedRange, "source origin is not within allowed range")
	SpecifiedProductCodeDoesNotBelongToTheUser                                  = NewBusinessError(ErrorCodeSpecifiedProductCodeDoesNotBelongToTheUser, "specified product code does not belong to the user")
	StartDateCannotBeInThePast                                                  = NewBusinessError(ErrorCodeStartDateCannotBeInThePast, "StartDate cannot be in the past")
	StatementFileTypeIsNotWithinAllowedRange                                    = NewBusinessError(ErrorCodeStatementFileTypeIsNotWithinAllowedRange, "StatementFileType is not within allowed range")
	StatementFileTypeIsRequired                                                 = NewBusinessError(ErrorCodeStatementFileTypeIsRequired, "StatementFileType is required")
	StatusIsNotWithinAllowedRange                                               = NewBusinessError(ErrorCodeStatusIsNotWithinAllowedRange, "status is not within allowed range")
	StatusIsRequired                                                            = NewBusinessError(ErrorCodeStatusIsRequired, "Status is required")
	StepUpRequestIDIsRequired                                                   = NewBusinessError(ErrorCodeStepUpRequestIDIsRequired, "StepUpRequestID is required")
	StepUpRequestIDNotFound                                                     = NewBusinessError(ErrorCodeStepUpRequestIDNotFound, "StepUpRequestID not found")
	StepUpRequestIDNotInUUID4Format                                             = NewBusinessError(ErrorCodeStepUpRequestIDNotInUUID4Format, "StepUpRequestID is not in UUID4 format")
	StreetNumberIsRequired                                                      = NewBusinessError(ErrorCodeStreetNumberIsRequired, "StreetNumber is required")
	SubjectIsRequired                                                           = NewBusinessError(ErrorCodeSubjectIsRequired, "Subject is required")
	SuccessCallbackURLIsRequired                                                = NewBusinessError(ErrorCodeSuccessCallbackURLIsRequired, "SuccessCallbackURL is required")
	SummaryIsNotAllowed                                                         = NewBusinessError(ErrorCodeSummaryIsNotAllowed, "Summary is not allowed")
	SummaryIsRequired                                                           = NewBusinessError(ErrorCodeSummaryIsRequired, "Summary is required")
	SummaryReportCannotBeGeneratedForProduct                                    = NewBusinessError(ErrorCodeSummaryReportCannotBeGeneratedForProduct, "summary report cannot be generated for product")
	SupportManagerRoleNotFound                                                  = NewBusinessError(ErrorCodeSupportManagerRoleNotFound, "support manager role not found")
	SwiftCodeMustBeMaximum11CharsInLength                                       = NewBusinessError(ErrorCodeSwiftCodeMustBeMaximum11CharsInLength, "SwiftCode must be maximum of 11 characters in length")
	SystemRoleCannotBeAltered                                                   = NewBusinessError(ErrorCodeSystemRoleCannotBeAltered, "system role cannot be altered")
	TargetEntityIDIsRequired                                                    = NewBusinessError(ErrorCodeTargetEntityIDIsRequired, "TargetEntityID is required")
	TargetEntityIDNotInUUID4Format                                              = NewBusinessError(ErrorCodeTargetEntityIDNotInUUID4Format, "TargetEntityID is not in UUID4 format")
	TargetEntityNameIDIsRequired                                                = NewBusinessError(ErrorCodeTargetEntityNameIDIsRequired, "TargetEntityNameID is required")
	TargetEntityNameIsNotWithinAllowedRange                                     = NewBusinessError(ErrorCodeTargetEntityNameIsNotWithinAllowedRange, "TargetEntityName is not within allowed range")
	TargetEntityNameIsRequired                                                  = NewBusinessError(ErrorCodeTargetEntityNameIsRequired, "TargetEntityName is required")
	TargetIDIsRequired                                                          = NewBusinessError(ErrorCodeTargetIDIsRequired, "TargetID is required")
	TargetIDNotInUUID4Format                                                    = NewBusinessError(ErrorCodeTargetIDNotInUUID4Format, "TargetID is not in UUID4 format")
	TargetNameIsNotWithinAllowedRange                                           = NewBusinessError(ErrorCodeTargetNameIsNotWithinAllowedRange, "TargetName is not within allowed range")
	TargetNameIsRequired                                                        = NewBusinessError(ErrorCodeTargetNameIsRequired, "TargetName is required")
	TaxResidenceIsRequired                                                      = NewBusinessError(ErrorCodeTaxResidenceIsRequired, "TaxResidence is required")
	TemplateAlreadyExists                                                       = NewBusinessError(ErrorCodeTemplateAlreadyExists, "template already exists")
	TemplateBodyIsRequired                                                      = NewBusinessError(ErrorCodeTemplateBodyIsRequired, "Template body is required")
	TemplateDeliveryTypeIsInvalid                                               = NewBusinessError(ErrorCodeTemplateDeliveryTypeIsInvalid, "Template delivery type is invalid")
	TemplateDeliveryTypeIsNotAllowedForCurrentMessageType                       = NewBusinessError(ErrorCodeTemplateDeliveryTypeIsNotAllowedForCurrentMessageType, "Template delivery type is not allowed for current message type")
	TemplateDeliveryTypeIsRequired                                              = NewBusinessError(ErrorCodeTemplateDeliveryTypeIsRequired, "Template delivery type is required")
	TemplateIDIsRequired                                                        = NewBusinessError(ErrorCodeTemplateIDIsRequired, "TemplateID is required")
	TemplateIDNotInUUID4Format                                                  = NewBusinessError(ErrorCodeTemplateIDNotInUUID4Format, "Template ID not in UUID4 format")
	TemplateIsDeleted                                                           = NewBusinessError(ErrorCodeTemplateIsDeleted, "template is deleted")
	TemplateMessageTypeIsInvalid                                                = NewBusinessError(ErrorCodeTemplateMessageTypeIsInvalid, "Template message type is invalid")
	TemplateMessageTypeIsRequired                                               = NewBusinessError(ErrorCodeTemplateMessageTypeIsRequired, "Template message type is required")
	TemplateNameIsRequired                                                      = NewBusinessError(ErrorCodeTemplateNameIsRequired, "TemplateName is required")
	TemplateNotFound                                                            = NewBusinessError(ErrorCodeTemplateNotFound, "template not found")
	TemplatesNotFound                                                           = NewBusinessError(ErrorCodeTemplatesNotFound, "templates not found")
	TerminalIDIsRequired                                                        = NewBusinessError(ErrorCodeTerminalIDIsRequired, "terminal ID is required")
	TerminalIDMustHaveLimitedLength                                             = NewBusinessError(ErrorCodeTerminalIDMustHaveLimitedLength, "TerminalID must be maximum 10 chars in length")
	TerminateDateCannotBeEarlierThanTodaysDate                                  = NewBusinessError(ErrorCodeTerminateDateCannotBeEarlierThanTodaysDate, "terminate date cannot be earlier than today's date")
	TextIsRequired                                                              = NewBusinessError(ErrorCodeTextIsRequired, "Text is required")
	ThirdPartyServiceError                                                      = NewBusinessError(ErrorCodeThirdPartyServiceError, "third-party service error")
	ThreeDSPasswordContainsDisallowedCharacters                                 = NewBusinessError(ErrorCodeThreeDSPasswordContainsDisallowedCharacters, "3DS password contains disallowed characters")
	TimezoneIsRequired                                                          = NewBusinessError(ErrorCodeTimezoneIsRequired, "Timezone is required")
	TitleIsRequired                                                             = NewBusinessError(ErrorCodeTitleIsRequired, "Title is required")
	ToAccountIDNotInUUID4Format                                                 = NewBusinessError(ErrorCodeToAccountIDNotInUUID4Format, "ToAccountID is not in UUID4 format")
	ToCasesCountShouldBeGreaterOrEqualToFromCasesCount                          = NewBusinessError(ErrorCodeToCasesCountShouldBeGreaterOrEqualToFromCasesCount, "ToCasesCount should be greater or equal to FromCasesCount")
	ToCompanyIDIsRequired                                                       = NewBusinessError(ErrorCodeToCompanyIDIsRequired, "To company ID is required")
	ToDateIsRequired                                                            = NewBusinessError(ErrorCodeToDateIsRequired, "ToDate is required")
	ToRiskScoreShouldBeGreaterOrEqualToFromRiskScore                            = NewBusinessError(ErrorCodeToRiskScoreShouldBeGreaterOrEqualToFromRiskScore, "ToRiskScore should be greater or equal to FromRiskScore")
	ToUserIDNotInUUID4Format                                                    = NewBusinessError(ErrorCodeToUserIDNotInUUID4Format, "ToUserID is not in UUID4 format")
	ToUserIDOrCreateUserInfoIsRequired                                          = NewBusinessError(ErrorCodeToUserIDOrCreateUserInfoIsRequired, "ToUserID or CreateUserInfo is required")
	TokenIDIsRequired                                                           = NewBusinessError(ErrorCodeTokenIDIsRequired, "TokenID is required")
	TokenIDNotInUUID4Format                                                     = NewBusinessError(ErrorCodeTokenIDNotInUUID4Format, "TokenID is not in UUID4 format")
	TokenIsRequired                                                             = NewBusinessError(ErrorCodeTokenIsRequired, "Token is required")
	TokenNotFound                                                               = NewBusinessError(ErrorCodeTokenNotFound, "token not found")
	TokenNotificationReasonNotWithinAllowedRange                                = NewBusinessError(ErrorCodeTokenNotificationReasonNotWithinAllowedRange, "token notification reason is not within allowed range")
	TokenReferenceIDIsRequired                                                  = NewBusinessError(ErrorCodeTokenReferenceIDIsRequired, "TokenReferenceID is required")
	TokenRequestorIDIsRequired                                                  = NewBusinessError(ErrorCodeTokenRequestorIDIsRequired, "TokenRequestorID is required")
	TokenRequestorNotWithinAllowedRange                                         = NewBusinessError(ErrorCodeTokenRequestorNotWithinAllowedRange, "token requestor is not within allowed range")
	TokenStatusNotWithinAllowedRange                                            = NewBusinessError(ErrorCodeTokenStatusNotWithinAllowedRange, "TokenStatus is not within allowed range")
	TokenStatusTransitionNotAllowed                                             = NewBusinessError(ErrorCodeTokenStatusTransitionNotAllowed, "token status transition not allowed")
	TokenValueInvalid                                                           = NewBusinessError(ErrorCodeTokenValueInvalid, "TokenValue is invalid")
	TokenValueRequired                                                          = NewBusinessError(ErrorCodeTokenValueRequired, "TokenValue is required")
	TokenValuesRequired                                                         = NewBusinessError(ErrorCodeTokenValuesRequired, "TokenValues is required")
	TokensNotFound                                                              = NewBusinessError(ErrorCodeTokensNotFound, "no tokens found")
	TooFrequentRequests                                                         = NewBusinessError(ErrorCodeTooFrequentRequests, "too frequent requests")
	TooManyKeysInStorage                                                        = NewBusinessError(ErrorCodeTooManyKeysInStorage, "too many keys in storage")
	TooManyPaymentMetadataRecordsPerPayment                                     = NewBusinessError(ErrorCodeTooManyPaymentMetadataRecordsPerPayment, "Too many payment metadata records per payment")
	TooManyPersonAdditionalInfoRecords                                          = NewBusinessError(ErrorCodeTooManyPersonAdditionalInfoRecords, "Too many person additional info records")
	TopUpDetailsBankAddressMustBeMaximum200CharsInLength                        = NewBusinessError(ErrorCodeTopUpDetailsBankAddressMustBeMaximum200CharsInLength, "BankAddress must be maximum of 200 characters in length")
	TopUpDetailsBankNameMustBeMaximum200CharsInLength                           = NewBusinessError(ErrorCodeTopUpDetailsBankNameMustBeMaximum200CharsInLength, "BankName must be maximum of 200 characters in length")
	TopUpDetailsIsRequired                                                      = NewBusinessError(ErrorCodeTopUpDetailsIsRequired, "TopUpDetails is required")
	TopUpDetailsPaymentDetailsMustBeMaximum200CharsInLength                     = NewBusinessError(ErrorCodeTopUpDetailsPaymentDetailsMustBeMaximum200CharsInLength, "PaymentDetails must be maximum of 200 characters in length")
	TopUpDetailsReceiverNameMustBeMaximum200CharsInLength                       = NewBusinessError(ErrorCodeTopUpDetailsReceiverNameMustBeMaximum200CharsInLength, "ReceiverName must be maximum of 200 characters in length")
	TopUpDetailsRegistrationNumberMustBeMaximum100CharsInLength                 = NewBusinessError(ErrorCodeTopUpDetailsRegistrationNumberMustBeMaximum100CharsInLength, "RegistrationNumber must be maximum of 100 characters in length")
	TopUpDetailsSpecifyingIsNotAllowedForWBlack                                 = NewBusinessError(ErrorCodeTopUpDetailsSpecifyingIsNotAllowedForWBlack, "Top-up details specifying is not allowed for WBlack product type")
	TrackingNumberIsRequired                                                    = NewBusinessError(ErrorCodeTrackingNumberIsRequired, "TrackingNumber is required")
	TransactionAlreadyCleared                                                   = NewBusinessError(ErrorCodeTransactionAlreadyCleared, "transaction already cleared")
	TransactionAmountIsRequired                                                 = NewBusinessError(ErrorCodeTransactionAmountIsRequired, "transaction amount is required")
	TransactionBatchOverMaxLimit                                                = NewBusinessError(ErrorCodeTransactionBatchOverMaxLimit, "transaction batch is over allowed max limit")
	TransactionCodeIsRequired                                                   = NewBusinessError(ErrorCodeTransactionCodeIsRequired, "transaction code is required")
	TransactionCurrencyCodeDoesNotMatchWithCurrencyCodeOfAccount                = NewBusinessError(ErrorCodeTransactionCurrencyCodeDoesNotMatchWithCurrencyCodeOfAccount, "transaction currency code doesn't match with currency code of account")
	TransactionCurrencyCodeIsRequired                                           = NewBusinessError(ErrorCodeTransactionCurrencyCodeIsRequired, "transaction currency code is required")
	TransactionIDIsRequired                                                     = NewBusinessError(ErrorCodeTransactionIDIsRequired, "TransactionID is required")
	TransactionIDNotInUUID4Format                                               = NewBusinessError(ErrorCodeTransactionIDNotInUUID4Format, "TransactionID is not in UUID4 format")
	TransactionIdentifierIsRequired                                             = NewBusinessError(ErrorCodeTransactionIdentifierIsRequired, "transaction identifier is required")
	TransactionIdentifierMustBeMaximum15CharsInLength                           = NewBusinessError(ErrorCodeTransactionIdentifierMustBeMaximum15CharsInLength, "TransactionIdentifier must be maximum 15 chars in length")
	TransactionIsAlreadyArchived                                                = NewBusinessError(ErrorCodeTransactionIsAlreadyArchived, "transaction is already archived")
	TransactionIsAlreadyMarkedForManualClearing                                 = NewBusinessError(ErrorCodeTransactionIsAlreadyMarkedForManualClearing, "transaction is already marked for manual clearing")
	TransactionIsArchived                                                       = NewBusinessError(ErrorCodeTransactionIsArchived, "transaction is archived")
	TransactionIsRequired                                                       = NewBusinessError(ErrorCodeTransactionIsRequired, "transaction is required")
	TransactionLimitExceedsDailyLimit                                           = NewBusinessError(ErrorCodeTransactionLimitExceedsDailyLimit, "transaction limit exceeds daily limit")
	TransactionLimitExceedsDailyOverallLimit                                    = NewBusinessError(ErrorCodeTransactionLimitExceedsDailyOverallLimit, "transaction limit exceeds daily overall limit")
	TransactionIsNotFailed                                                      = NewBusinessError(ErrorCodeTransactionIsNotFailed, "transaction is not failed")
	TransactionNotFound                                                         = NewBusinessError(ErrorCodeTransactionNotFound, "no transaction found")
	TransactionsAdditionalInfoNotFound                                          = NewBusinessError(ErrorCodeTransactionsAdditionalInfoNotFound, "no transactions additional info found")
	TransactionsNotFound                                                        = NewBusinessError(ErrorCodeTransactionsNotFound, "no transactions found")
	TranslationKeysIsRequired                                                   = NewBusinessError(ErrorCodeTranslationKeysIsRequired, "TranslationKeys is required")
	TranslationsForGivenLanguageCodeWereNotFound                                = NewBusinessError(ErrorCodeTranslationsForGivenLanguageCodeWereNotFound, "translations for given language code were not found")
	TypeIsRequired                                                              = NewBusinessError(ErrorCodeTypeIsRequired, "Type is required")
	TypeNotWithinAllowedRange                                                   = NewBusinessError(ErrorCodeTypeNotWithinAllowedRange, "Type is not within allowed range")
	UnableToChangeVerificationData                                              = NewBusinessError(ErrorCodeUnableToChangeVerificationData, "unable to change verification data")
	UnexpectedBehaviour                                                         = NewBusinessError(ErrorCodeUnexpectedBehaviour, "unexpected behaviour")
	UnexpectedChallengeType                                                     = NewBusinessError(ErrorCodeUnexpectedChallengeType, "unexpected challenge type")
	UnknownEntityType                                                           = NewBusinessError(ErrorCodeUnknownEntityType, "unknown entity type")
	UnknownProductType                                                          = NewBusinessError(ErrorCodeUnknownProductType, "unknown product type")
	UpdatePersonalizationProductCodeRequiresCardTypeVirtual                     = NewBusinessError(ErrorCodeUpdatePersonalizationProductCodeRequiresCardTypeVirtual, "update personalization product code requires CardTypeVirtual")
	UpdatedReasonOrUpdatedByObjectIsRequired                                    = NewBusinessError(ErrorCodeUpdatedReasonOrUpdatedByObjectIsRequired, "UpdatedReason or UpdatedByObjectID/UpdatedByObjectType is required")
	UploadFileHeaderIsRequired                                                  = NewBusinessError(ErrorCodeUploadFileHeaderIsRequired, "UploadFileHeader is required")
	UsedCreditCannotBeMoreThanCreditLimit                                       = NewBusinessError(ErrorCodeUsedCreditCannotBeMoreThanCreditLimit, "UsedCredit cannot be more than CreditLimit")
	UsedCreditCannotBeNegative                                                  = NewBusinessError(ErrorCodeUsedCreditCannotBeNegative, "UsedCredit cannot be negative")
	UsedCreditIsNotAllowed                                                      = NewBusinessError(ErrorCodeUsedCreditIsNotAllowed, "UsedCredit is not allowed")
	UsedCurrencyCodesCannotBeUsedForProductReport                               = NewBusinessError(ErrorCodeUsedCurrencyCodesCannotBeUsedForProductReport, "used currency codes cannot be used for product report")
	UsedCurrencyCodesIsNotAllowed                                               = NewBusinessError(ErrorCodeUsedCurrencyCodesIsNotAllowed, "UsedCurrencyCodes is not allowed")
	UsedCurrencyCodesIsRequired                                                 = NewBusinessError(ErrorCodeUsedCurrencyCodesIsRequired, "UsedCurrencyCodes is required")
	UserAccountIsLocked                                                         = NewBusinessError(ErrorCodeUserAccountIsLocked, "user account is locked")
	UserAgentMustBeMaximum4096CharsInLength                                     = NewBusinessError(ErrorCodeUserAgentMustBeMaximum4096CharsInLength, "UserAgent must be maximum 4096 chars in length")
	UserAlreadyDeleted                                                          = NewBusinessError(ErrorCodeUserAlreadyDeleted, "user is already deleted")
	UserCannotBeDeleted                                                         = NewBusinessError(ErrorCodeUserCannotBeDeleted, "User cannot be deleted")
	UserDoesNotBelongToCurrentClient                                            = NewBusinessError(ErrorCodeUserDoesNotBelongToCurrentClient, "user does not belong to current client")
	UserDoesNotHaveProduct                                                      = NewBusinessError(ErrorCodeUserDoesNotHaveProduct, "user does not have product")
	UserDoesNotHaveRequiredPermission                                           = NewBusinessError(ErrorCodeUserDoesNotHaveRequiredPermission, "user does not have required permission")
	UserHasBeenDeleted                                                          = NewBusinessError(ErrorCodeUserHasBeenDeleted, "user has been deleted")
	UserHasNoPINSet                                                             = NewBusinessError(ErrorCodeUserHasNoPINSet, "user has no PIN set")
	UserHasNoPasswordSet                                                        = NewBusinessError(ErrorCodeUserHasNoPasswordSet, "user has no password set")
	UserIDIsRequired                                                            = NewBusinessError(ErrorCodeUserIDIsRequired, "UserID is required")
	UserIDNotInUUID4Format                                                      = NewBusinessError(ErrorCodeUserIDNotInUUID4Format, "UserID is not in UUID4 format")
	UserIDsIsRequired                                                           = NewBusinessError(ErrorCodeUserIDsIsRequired, "UserIDs is required")
	UserIPAlreadyExists                                                         = NewBusinessError(ErrorCodeUserIPAlreadyExists, "user IP already exists")
	UserIPIDIsRequired                                                          = NewBusinessError(ErrorCodeUserIPIDIsRequired, "UserIPID is required")
	UserIPIDNotInUUID4Format                                                    = NewBusinessError(ErrorCodeUserIPIDNotInUUID4Format, "UserIPID is not in UUID4 format")
	UserIPIsRequired                                                            = NewBusinessError(ErrorCodeUserIPIsRequired, "UserIP is required")
	UserIPMaskOutOfRange                                                        = NewBusinessError(ErrorCodeUserIPMaskOutOfRange, "user IP mask out of range")
	UserIPMaskSizeMustBeMaximumOf24                                             = NewBusinessError(ErrorCodeUserIPMaskSizeMustBeMaximumOf24, "user IP mask size must be maximum of 24")
	UserIPMaximumCountExceeded                                                  = NewBusinessError(ErrorCodeUserIPMaximumCountExceeded, "user IP maximum count exceeded")
	UserIPNotFound                                                              = NewBusinessError(ErrorCodeUserIPNotFound, "user IP not found")
	UserIPsMustBelongToTheSameUser                                              = NewBusinessError(ErrorCodeUserIPsMustBelongToTheSameUser, "user IPs must belong to the same user")
	UserIsDeleted                                                               = NewBusinessError(ErrorCodeUserIsDeleted, "user is deleted")
	UserIsNotLocked                                                             = NewBusinessError(ErrorCodeUserIsNotLocked, "user is not locked")
	UserIsRequired                                                              = NewBusinessError(ErrorCodeUserIsRequired, "User is required")
	UserNameAlreadyExists                                                       = NewBusinessError(ErrorCodeUserNameAlreadyExists, "user name already exists")
	UserNotFound                                                                = NewBusinessError(ErrorCodeUserNotFound, "no user found")
	UserPersonProfileNotFound                                                   = NewBusinessError(ErrorCodeUserPersonProfileNotFound, "user person profile not found")
	UserProfileIDIsRequired                                                     = NewBusinessError(ErrorCodeUserProfileIDIsRequired, "UserProfileID is required")
	UserProfileIDNotInUUID4Format                                               = NewBusinessError(ErrorCodeUserProfileIDNotInUUID4Format, "UserProfileID is not in UUID4 format")
	UserProfileIDsAreRequired                                                   = NewBusinessError(ErrorCodeUserProfileIDsAreRequired, "UserProfileIDs are required")
	UserProfileIsDeleted                                                        = NewBusinessError(ErrorCodeUserProfileIsDeleted, "user profile is deleted")
	UserProfileIsLocked                                                         = NewBusinessError(ErrorCodeUserProfileIsLocked, "user profile is locked")
	UserProfileIsNotLocked                                                      = NewBusinessError(ErrorCodeUserProfileIsNotLocked, "user profile is not locked")
	UserProfileNameMustBeMaximum201CharactersInLength                           = NewBusinessError(ErrorCodeUserProfileNameMustBeMaximum201CharactersInLength, "user profile name must be maximum 201 characters in length")
	UserProfileNotFound                                                         = NewBusinessError(ErrorCodeUserProfileNotFound, "no user profile found")
	UserProfileRoleAlreadyExists                                                = NewBusinessError(ErrorCodeUserProfileRoleAlreadyExists, "user profile role already exists")
	UserProfilesNotFound                                                        = NewBusinessError(ErrorCodeUserProfilesNotFound, "no user profiles found")
	UserWithGivenEmailDoesNotExist                                              = NewBusinessError(ErrorCodeUserWithGivenEmailDoesNotExist, "user with given email does not exist")
	VATNumberMustBeMaximum30CharactersInLength                                  = NewBusinessError(ErrorCodeVATNumberMustBeMaximum30CharactersInLength, "VATNumber must be maximum 30 characters in length")
	ValueExceedsMaximumLength                                                   = NewBusinessError(ErrorCodeValueExceedsMaximumLength, "Value exceeds maximum length")
	ValueIsRequired                                                             = NewBusinessError(ErrorCodeValueIsRequired, "Value is required")
	ValueIsTooLong                                                              = NewBusinessError(ErrorCodeValueIsTooLong, "Value is too long")
	ValuesIsRequired                                                            = NewBusinessError(ErrorCodeValuesIsRequired, "Values is required")
	VerificationIsNotAvailable                                                  = NewBusinessError(ErrorCodeVerificationIsNotAvailable, "Verification is not available for your product")
	VerificationLogNotFound                                                     = NewBusinessError(ErrorCodeVerificationLogNotFound, "no verification log found")
	VerificationSecretExpired                                                   = NewBusinessError(ErrorCodeVerificationSecretExpired, "verification secret has already expired")
	VerificationSecretIsInvalid                                                 = NewBusinessError(ErrorCodeVerificationSecretIsInvalid, "VerificationSecret is invalid")
	VerificationSecretIsRequired                                                = NewBusinessError(ErrorCodeVerificationSecretIsRequired, "VerificationSecret is required")
	VerificationStateIsRequired                                                 = NewBusinessError(ErrorCodeVerificationStateIsRequired, "VerificationState is required")
	VerificationStatusCannotBeSetToConfirmedUntilIsAdverseMediaInvolvedIsFilled = NewBusinessError(ErrorCodeVerificationStatusCannotBeSetToConfirmedUntilIsAdverseMediaInvolvedIsFilled, "VerificationStatus cannot be set to Confirmed until IsAdverseMediaInvolved is filled")
	VerificationStatusCannotBeSetToConfirmedUntilIsPoliticallyExposedIsFilled   = NewBusinessError(ErrorCodeVerificationStatusCannotBeSetToConfirmedUntilIsPoliticallyExposedIsFilled, "VerificationStatus cannot be set to Confirmed until IsPoliticallyExposed is filled")
	VerificationStatusCannotBeSetToConfirmedUntilIsSanctionsRelatedIsFilled     = NewBusinessError(ErrorCodeVerificationStatusCannotBeSetToConfirmedUntilIsSanctionsRelatedIsFilled, "VerificationStatus cannot be set to Confirmed until IsSanctionsRelated is filled")
	VerificationStatusNotWithinAllowedRange                                     = NewBusinessError(ErrorCodeVerificationStatusNotWithinAllowedRange, "VerificationStatus not within allowed range")
	VibanAlreadyLinked                                                          = NewBusinessError(ErrorCodeVibanAlreadyLinkedOnAccount, "viban already linked on account")
	VibanFunctionalityIsDisabled                                                = NewBusinessError(ErrorCodeVibanFunctionalityIsDisabled, "viban functionality is disabled")
	VibanNotFound                                                               = NewBusinessError(ErrorCodeVibanNotFound, "viban not found")
	VibanProviderNotEnabled                                                     = NewBusinessError(ErrorCodeVibanProviderNotEnabled, "viban provider is not enabled")
	VirtualCardCannotBeCreatedWithChipAndPINPersonalizationProductCodes         = NewBusinessError(ErrorCodeVirtualCardCannotBeCreatedWithChipAndPINPersonalizationProductCodes, "Virtual card can't be created with ChipAndPIN Personalization Product Codes")
	VirtualCardIsNotAllowed                                                     = NewBusinessError(ErrorCodeVirtualCardIsNotAllowed, "virtual card is not allowed")
	VirtualCardsQuantityCannotExceedVirtualCardsMaximumLimit                    = NewBusinessError(ErrorCodeVirtualCardsQuantityCannotExceedVirtualCardsMaximumLimit, "virtual cards quantity cannot exceed virtual cards maximum limit")
	WBlackProductTypeNotAllowed                                                 = NewBusinessError(ErrorCodeWBlackProductTypeNotAllowed, "WBlack product type not allowed")
	WBlackProductTypeRequired                                                   = NewBusinessError(ErrorCodeWBlackProductTypeRequired, "WBlack product type required")
	WebRepresentationMustBeMaximum2048CharsInLength                             = NewBusinessError(ErrorCodeWebRepresentationMustBeMaximum2048CharsInLength, "WebRepresentation must be maximum 2048 characters in length")
	WeeklyLimitExceedsMonthlyLimit                                              = NewBusinessError(ErrorCodeWeeklyLimitExceedsMonthlyLimit, "weekly limit exceeds monthly limit")
	WhiteLabelProductTypeIsRequired                                             = NewBusinessError(ErrorCodeWhiteLabelProductTypeIsRequired, "WhiteLabel product type is required")
	WrongCAPTCHAResult                                                          = NewBusinessError(ErrorCodeWrongCAPTCHAResult, "wrong CAPTCHA result")
	WrongDateFormat                                                             = NewBusinessError(ErrorCodeWrongDateFormat, "wrong date format")
	YearIsRequired                                                              = NewBusinessError(ErrorCodeYearIsRequired, "Year is required")
	YearMustBe4CharsInLength                                                    = NewBusinessError(ErrorCodeYearMustBe4CharsInLength, "year must be 4 chars in length")
	YouAlreadyHaveThisPricingPlan                                               = NewBusinessError(ErrorCodeYouAlreadyHaveThisPricingPlan, "you already have this pricing plan")
	YouCannotDowngradePricingPlan                                               = NewBusinessError(ErrorCodeYouCannotDowngradePricingPlan, "you cannot downgrade pricing plan")
	NoTokenInResponse                                                           = NewBusinessError(ErrorCodeNoTokenInResponse, "no token in response")
	TransactionNotApproved                                                      = NewBusinessError(ErrorCodeTransactionNotApproved, "transaction not approved")
	InvalidHTTPStatusCode                                                       = NewBusinessError(ErrorCodeInvalidHTTPStatusCode, "invalid HTTP status code")
	InvalidResponseCode                                                         = NewBusinessError(ErrorCodeInvalidResponseCode, "invalid response code")
	InvalidResponseStatus                                                       = NewBusinessError(ErrorCodeInvalidResponseStatus, "invalid response status")
	InternalAPIKeyIsRequired                                                    = NewBusinessError(ErrorCodeInternalAPIKeyIsRequired, "internal API key is required")
	InternalAPIClientIsRequired                                                 = NewBusinessError(ErrorCodeInternalAPIClientIsRequired, "internal API client is required")
	InternalAPIClientNotFound                                                   = NewBusinessError(ErrorCodeInternalAPIClientNotFound, "internal API client not found")
	InternalAPIRequestMetaDataIsRequired                                        = NewBusinessError(ErrorCodeInternalAPIRequestMetaDataIsRequired, "internal API request metadata is required")
	InternalAPIClientMetaDataIsRequired                                         = NewBusinessError(ErrorCodeInternalAPIClientMetaDataIsRequired, "internal API client metadata is required")
	InternalAPIKeyMetaDataIsRequired                                            = NewBusinessError(ErrorCodeInternalAPIKeyMetaDataIsRequired, "internal API key metadata is required")
	InvalidFieldMask                                                            = NewBusinessError(ErrorCodeInvalidFieldMask, "invalid field mask")
)

// IsErrorCode checks if a given error has the given business error code.
func IsErrorCode(err error, code ErrorCode) bool {
	return code == ErrorCodeFromError(err)
}

// ErrorCodeFromError returns error code from error, or 0 if no error code present.
func ErrorCodeFromError(err error) ErrorCode {
	status, ok := status.FromError(errors.Cause(err))
	if ok {
		errorCode := int(status.Code())
		if errorCode >= 10000 {
			return ErrorCode(errorCode)
		}
	}

	return 0
}

func NewBusinessError(code ErrorCode, message string) error {
	return status.Error(codes.Code(code), message)
}
